{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/proyecto/my-app/src/App.tsx\";\nimport * as React from 'react';\nimport './App.css';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport { generatedata } from './generatedata';\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.myGrid = React.createRef();\n    this.excelBtnOnClick = this.excelBtnOnClick.bind(this);\n    const source = {\n      datafields: [{\n        name: 'firstname',\n        type: 'string'\n      }, {\n        name: 'lastname',\n        type: 'string'\n      }],\n      datatype: 'csv',\n      url: 'jqxGrid.xls'\n    };\n    const source2 = {\n      datafields: [{\n        name: 'firstname',\n        type: 'string'\n      }, {\n        name: 'lastname',\n        type: 'string'\n      }],\n      datatype: 'array',\n      localdata: generatedata(100)\n    };\n    this.state = {\n      columns: [{\n        text: 'First Name',\n        datafield: 'firstname',\n        width: 250\n      }, {\n        text: 'Last Name',\n        datafield: 'lastname',\n        width: 150\n      }],\n      columns2: [{\n        text: 'First Name',\n        datafield: 'firstname',\n        width: 250\n      }, {\n        text: 'Last Name',\n        datafield: 'lastname',\n        width: 150\n      }],\n      source: new jqx.dataAdapter(source),\n      source2: new jqx.dataAdapter(source2)\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        overflow: 'hidden'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(JqxGrid, {\n      ref: this.myGrid,\n      width: '30%',\n      height: '100%',\n      source: this.state.source2,\n      columns: this.state.columns2,\n      sortable: true,\n      editable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    })), React.createElement(JqxButton, {\n      style: {\n        width: '100px'\n      },\n      onClick: this.excelBtnOnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Export to Excel\"));\n  }\n\n  excelBtnOnClick() {\n    this.myGrid.current.exportdata('xls', 'jqxGrid');\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/adrian/Escritorio/proyecto/my-app/src/App.tsx"],"names":["React","JqxGrid","jqx","generatedata","JqxButton","App","PureComponent","constructor","props","myGrid","createRef","excelBtnOnClick","bind","source","datafields","name","type","datatype","url","source2","localdata","state","columns","text","datafield","width","columns2","dataAdapter","render","overflow","current","exportdata"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport './App.css';\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport JqxTabs from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxtabs';\nimport { generatedata } from './generatedata'\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nexport interface IState extends IGridProps {\n    source2: IGridProps['source'];\n    columns2: IGridProps['columns']\n}\nclass App extends React.PureComponent<{}, IState> {\n    private myGrid = React.createRef<JqxGrid>();\n    constructor(props: {}) {\n        super(props);\n        this.excelBtnOnClick = this.excelBtnOnClick.bind(this);\n        const source: any = {\n            datafields: [\n                { name: 'firstname', type: 'string' },\n                { name: 'lastname', type: 'string' },\n            ],\n            datatype: 'csv',\n            url: 'jqxGrid.xls'\n        };\n        \n        const source2: any = {\n            datafields: [\n                { name: 'firstname', type: 'string' },\n                { name: 'lastname', type: 'string' },\n\n            ],\n            datatype: 'array',\n            localdata: generatedata(100)\n        };\n        this.state = {\n            columns: [\n                { text: 'First Name', datafield: 'firstname', width: 250 },\n                { text: 'Last Name', datafield: 'lastname', width: 150 },\n            ],\n            columns2: [\n                { text: 'First Name', datafield: 'firstname', width: 250 },\n                { text: 'Last Name', datafield: 'lastname', width: 150 },\n\n            ],\n            source: new jqx.dataAdapter(source),\n            source2: new jqx.dataAdapter(source2)\n        }\n    }\n    public render() {\n        return (\n            <div>\n\n                \n                <div style={{ overflow: 'hidden' }}>\n                    \n                    <JqxGrid \n                    ref={this.myGrid} width={'30%'} height={'100%'} \n                    source={this.state.source2} \n                    columns={this.state.columns2} \n                    sortable={true}\n                    editable={true}\n                    />\n                </div>\n                               \n                \n            <JqxButton style={{width:'100px'}} onClick={this.excelBtnOnClick}>Export to Excel</JqxButton>\n            </div>\n        );\n    }\n\n    private excelBtnOnClick() {\n        this.myGrid.current!.exportdata('xls', 'jqxGrid');\n        \n    };\n\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}