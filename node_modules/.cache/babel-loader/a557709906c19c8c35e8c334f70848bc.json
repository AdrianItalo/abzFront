{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/proyecto/my-app/src/App.tsx\";\nimport * as React from 'react';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    const source = {\n      datafields: [{\n        name: 'ShippedDate',\n        map: 'm\\\\:properties>d\\\\:ShippedDate',\n        type: 'date'\n      }, {\n        name: 'Freight',\n        map: 'm\\\\:properties>d\\\\:Freight',\n        type: 'float'\n      }, {\n        name: 'ShipName',\n        map: 'm\\\\:properties>d\\\\:ShipName',\n        type: 'string'\n      }, {\n        name: 'ShipAddress',\n        map: 'm\\\\:properties>d\\\\:ShipAddress',\n        type: 'string'\n      }, {\n        name: 'ShipCity',\n        map: 'm\\\\:properties>d\\\\:ShipCity',\n        type: 'string'\n      }, {\n        name: 'ShipCountry',\n        map: 'm\\\\:properties>d\\\\:ShipCountry',\n        type: 'string'\n      }],\n      datatype: 'xml',\n      id: 'm\\\\:properties>d\\\\:OrderID',\n      record: 'content',\n      root: 'entry',\n      url: 'orders.xml'\n    };\n    this.state = {\n      columns: [{\n        // update the editor's value before saving it.\n        cellvaluechanging: (row, column, columntype, oldvalue, newvalue) => {\n          // return the old value, if the new value is empty.\n          if (newvalue === '') {\n            return oldvalue;\n          }\n        },\n        columntype: 'combobox',\n        createeditor: (row, column, editor) => {\n          // assign a new data source to the combobox.\n          const list = ['Stuttgart', 'Rio de Janeiro', 'Strasbourg'];\n          editor.jqxComboBox({\n            autoDropDownHeight: true,\n            source: list,\n            promptText: 'Please Choose:'\n          });\n        },\n        datafield: 'ShipCity',\n        text: 'Ship City',\n        width: 150\n      }, {\n        // update the editor's value before saving it.\n        cellvaluechanging: (row, column, columntype, oldvalue, newvalue) => {\n          // return the old value, if the new value is empty.\n          if (newvalue === '') {\n            return oldvalue;\n          }\n        },\n        columntype: 'dropdownlist',\n        createeditor: (row, column, editor) => {\n          // assign a new data source to the dropdownlist.\n          const list = ['Germany', 'Brazil', 'France'];\n          editor.jqxDropDownList({\n            autoDropDownHeight: true,\n            source: list\n          });\n        },\n        datafield: 'ShipCountry',\n        text: 'Ship Country',\n        width: 150\n      }, {\n        text: 'Ship Name',\n        datafield: 'ShipName',\n        columntype: 'combobox'\n      }],\n      source: new jqx.dataAdapter(source)\n    };\n  }\n\n  render() {\n    return React.createElement(JqxGrid, {\n      theme: 'material-purple' // @ts-ignore\n      ,\n      source: this.state.source,\n      columns: this.state.columns,\n      pageable: true,\n      autoheight: true,\n      editable: true,\n      selectionmode: 'singlecell',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/adrian/Escritorio/proyecto/my-app/src/App.tsx"],"names":["React","JqxGrid","jqx","App","PureComponent","constructor","props","source","datafields","name","map","type","datatype","id","record","root","url","state","columns","cellvaluechanging","row","column","columntype","oldvalue","newvalue","createeditor","editor","list","jqxComboBox","autoDropDownHeight","promptText","datafield","text","width","jqxDropDownList","dataAdapter","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\n \n\n\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\n\n\nclass App extends React.PureComponent<{}, IGridProps> {\n\n    constructor(props: {}) {\n        super(props);\n\n        const source: any = {\n            datafields: [\n                { name: 'ShippedDate', map: 'm\\\\:properties>d\\\\:ShippedDate', type: 'date' },\n                { name: 'Freight', map: 'm\\\\:properties>d\\\\:Freight', type: 'float' },\n                { name: 'ShipName', map: 'm\\\\:properties>d\\\\:ShipName', type: 'string' },\n                { name: 'ShipAddress', map: 'm\\\\:properties>d\\\\:ShipAddress', type: 'string' },\n                { name: 'ShipCity', map: 'm\\\\:properties>d\\\\:ShipCity', type: 'string' },\n                { name: 'ShipCountry', map: 'm\\\\:properties>d\\\\:ShipCountry', type: 'string' }\n            ],\n            datatype: 'xml',\n            id: 'm\\\\:properties>d\\\\:OrderID',\n            record: 'content',\n            root: 'entry',\n            url: 'orders.xml'\n        };\n\n        this.state = {\n            columns: [\n                {\n                    // update the editor's value before saving it.\n                    cellvaluechanging: (row: number, column: any, columntype: any, oldvalue: any, newvalue: any): any => {\n                        // return the old value, if the new value is empty.\n                        if (newvalue === '') {\n                            return oldvalue;\n                        }\n                    },\n                    columntype: 'combobox',\n                    createeditor: (row: number, column: any, editor: any): void => {\n                        // assign a new data source to the combobox.\n                        const list = ['Stuttgart', 'Rio de Janeiro', 'Strasbourg'];\n                        editor.jqxComboBox({ autoDropDownHeight: true, source: list, promptText: 'Please Choose:' });\n                    },\n                    datafield: 'ShipCity', text: 'Ship City', width: 150\n                },\n                {\n                    // update the editor's value before saving it.\n                    cellvaluechanging: (row: number, column: any, columntype: any, oldvalue: any, newvalue: any): any => {\n                        // return the old value, if the new value is empty.\n                        if (newvalue === '') {\n                            return oldvalue;\n                        }\n                    },\n                    columntype: 'dropdownlist',\n                    createeditor: (row: number, column: any, editor: any): void => {\n                        // assign a new data source to the dropdownlist.\n                        const list = ['Germany', 'Brazil', 'France'];\n                        editor.jqxDropDownList({ autoDropDownHeight: true, source: list });\n                    },\n                    datafield: 'ShipCountry', text: 'Ship Country', width: 150\n                },\n                { text: 'Ship Name', datafield: 'ShipName', columntype: 'combobox' }\n            ],\n            source: new jqx.dataAdapter(source)\n        }\n    }\n\n    public render() {\n        return (\n            <JqxGrid theme={'material-purple'}\n                // @ts-ignore\n                source={this.state.source} columns={this.state.columns}\n                pageable={true} autoheight={true} editable={true} selectionmode={'singlecell'} />\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}