{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/proyecto/my-app/src/App.tsx\";\nimport * as React from 'react';\nimport { generatedata } from './generatedata';\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.myGrid = React.createRef();\n    this.excelBtnOnClick = this.excelBtnOnClick.bind(this);\n    this.pdfBtnOnClick = this.pdfBtnOnClick.bind(this);\n    const source = {\n      datafields: [{\n        name: 'firstname',\n        type: 'string'\n      }, {\n        name: 'lastname',\n        type: 'string'\n      }, {\n        name: 'productname',\n        type: 'string'\n      }, {\n        name: 'date',\n        type: 'date'\n      }, {\n        name: 'quantity',\n        type: 'number'\n      }, {\n        name: 'price',\n        type: 'number'\n      }],\n      datatype: 'array',\n      localdata: generatedata(200, false) //GENERAMOS 100 DATOS, MEDIANTE ESTA FUNCION\n\n    };\n    this.state = {\n      columns: [{\n        text: 'First Name',\n        datafield: 'firstname',\n        width: 130\n      }, {\n        text: 'Last Name',\n        datafield: 'lastname',\n        width: 130\n      }, {\n        text: 'Product',\n        datafield: 'productname',\n        width: 200\n      }, {\n        text: 'Ship Date',\n        datafield: 'date',\n        width: 120,\n        align: 'right',\n        cellsalign: 'right',\n        cellsformat: 'd'\n      }, {\n        text: 'Quantity',\n        datafield: 'quantity',\n        width: 70,\n        align: 'right',\n        cellsalign: 'right'\n      }, {\n        text: 'Price',\n        datafield: 'price',\n        cellsalign: 'right',\n        align: 'right',\n        cellsformat: 'c2'\n      }],\n      source: new jqx.dataAdapter(source)\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        fontSize: '13px',\n        fontFamily: 'Verdana',\n        float: 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(JqxGrid, {\n      theme: 'material-purple',\n      ref: this.myGrid // @ts-ignore\n      ,\n      width: '800px',\n      source: this.state.source,\n      columns: this.state.columns,\n      editable: true,\n      filterable: true,\n      sortable: true,\n      columnsresize: true,\n      autoshowfiltericon: true,\n      filtermode: 'excel',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        float: 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(JqxButton, {\n      theme: 'material-purple',\n      onClick: this.excelBtnOnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Export to Excel\")), React.createElement(\"div\", {\n      style: {\n        float: 'left',\n        marginLeft: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(JqxButton, {\n      theme: 'material-purple',\n      onClick: this.pdfBtnOnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Export to PDF\"))));\n  }\n\n  excelBtnOnClick() {\n    this.myGrid.current.exportdata('xls', 'jqxGrid');\n  }\n\n  pdfBtnOnClick() {\n    this.myGrid.current.exportdata('pdf', 'jqxGrid');\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/adrian/Escritorio/proyecto/my-app/src/App.tsx"],"names":["React","generatedata","JqxButton","JqxGrid","jqx","App","PureComponent","constructor","props","myGrid","createRef","excelBtnOnClick","bind","pdfBtnOnClick","source","datafields","name","type","datatype","localdata","state","columns","text","datafield","width","align","cellsalign","cellsformat","dataAdapter","render","fontSize","fontFamily","float","marginTop","marginLeft","current","exportdata"],"mappings":"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","sourcesContent":["import * as React from 'react';\n \n\n\nimport { generatedata } from './generatedata';\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\n\nclass App extends React.PureComponent<{}, IGridProps> {\n\n    private myGrid = React.createRef<JqxGrid>();\n\n    constructor(props: {}) {\n        super(props);\n        this.excelBtnOnClick = this.excelBtnOnClick.bind(this);\n        this.pdfBtnOnClick = this.pdfBtnOnClick.bind(this);\n        \n        const source: any = {\n            datafields: [\n                { name: 'firstname', type: 'string' },\n                { name: 'lastname', type: 'string' },\n                { name: 'productname', type: 'string' },\n                \n                { name: 'date', type: 'date' },\n                { name: 'quantity', type: 'number' },\n                { name: 'price', type: 'number' }\n            ],\n            datatype: 'array',\n            localdata: generatedata(200, false)//GENERAMOS 100 DATOS, MEDIANTE ESTA FUNCION\n        };\n\n        this.state = {\n            columns: [\n                { text: 'First Name', datafield: 'firstname', width: 130 },\n                { text: 'Last Name', datafield: 'lastname', width: 130 },\n                { text: 'Product', datafield: 'productname', width: 200 },\n                \n                { text: 'Ship Date', datafield: 'date', width: 120, align: 'right', cellsalign: 'right', cellsformat: 'd' },\n                { text: 'Quantity', datafield: 'quantity', width: 70, align: 'right', cellsalign: 'right' },\n                { text: 'Price', datafield: 'price', cellsalign: 'right', align: 'right', cellsformat: 'c2' }\n            ],\n            source: new jqx.dataAdapter(source)\n        }\n    }\n\n    public render() {\n        return (\n            <div style={{ fontSize: '13px', fontFamily: 'Verdana', float: 'left' }}>\n                <JqxGrid theme={'material-purple'} ref={this.myGrid}\n                    // @ts-ignore\n                    width={'800px'} source={this.state.source} columns={this.state.columns}                    \n                    editable={true} filterable={true} sortable={true} columnsresize={true} \n                    autoshowfiltericon={true} filtermode={'excel'}\n                    />\n\n                <div style={{ marginTop: '20px' }}>\n                    <div style={{ float: 'left' }}>\n                        <JqxButton theme={'material-purple'} onClick={this.excelBtnOnClick}>Export to Excel</JqxButton>\n                        \n                    </div>\n                    <div style={{ float: 'left', marginLeft: '10px' }}>\n                        <JqxButton theme={'material-purple'} onClick={this.pdfBtnOnClick}>Export to PDF</JqxButton>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private excelBtnOnClick() {\n        this.myGrid.current!.exportdata('xls', 'jqxGrid');\n    };\n\n    private pdfBtnOnClick() {\n        this.myGrid.current!.exportdata('pdf', 'jqxGrid');\n    };\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}