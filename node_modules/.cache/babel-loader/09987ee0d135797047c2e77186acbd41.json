{"ast":null,"code":"import _slicedToArray from \"/home/adrian/Escritorio/abzFront/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/adrian/Escritorio/abzFront/src/App.tsx\";\nimport React, { useState } from \"react\";\nimport JqxGrid, { jqx } from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid\";\nimport JqxTabs from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxtabs';\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.base.css\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.material.css\";\nimport { generatedata } from \"./generatedata\";\nimport JqxButton from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons\";\n\nconst MyGrid = () => {\n  const myGrid = React.createRef();\n  const myGrid2 = React.createRef();\n  const myTabs = React.createRef();\n\n  const _useState = useState(generatedata(100)),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setUser = _useState2[1];\n\n  const _useState3 = useState('array'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        typee = _useState4[0],\n        setType = _useState4[1];\n\n  const source = {\n    datafields: [{\n      name: 'firstname',\n      type: 'string'\n    }, {\n      name: 'productname',\n      type: 'string'\n    }],\n    datatype: typee,\n    localdata: data\n  };\n  const adapter = new jqx.dataAdapter(source);\n\n  const exportar = () => {\n    //console.log('')\n    myGrid.current.exportdata('xls', 'archivo');\n  };\n\n  const limpiar = () => {\n    myGrid.current.clearfilters();\n  };\n\n  const _useState5 = useState({\n    archivo: '',\n    subido: 0\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        subir = _useState6[0],\n        setSubir = _useState6[1];\n\n  const modificar = async () => {\n    //console.log(\"Modificar data\")\n    const data = await fetch('http://127.0.0.1:3333/archivo'); //a partir del excel subido, leemos los datos\n  };\n\n  const cargar = async event => {\n    const newData = new FormData();\n    const data = event.target.files[0];\n    newData.append(\"excel\", data); //console.log(data)\n\n    const resp = await fetch('http://127.0.0.1:3333/upload', {\n      method: \"POST\",\n      body: newData\n    }).then(resp => resp.json());\n    console.log(resp);\n    alert(JSON.stringify(resp));\n\n    if (resp) {\n      modificar();\n    } else {\n      return;\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(JqxTabs, {\n    ref: myTabs,\n    width: '35%',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    style: {\n      marginLeft: 30\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Sheet 1\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Sheet 2\")), React.createElement(JqxGrid, {\n    ref: myGrid,\n    width: \"500\",\n    source: adapter,\n    editable: true,\n    selectionmode: 'multiplecellsadvanced',\n    columns: [{\n      text: \"First Name\",\n      datafield: \"firstname\",\n      width: \"250\",\n      columntype: 'dropdownlist'\n    }, {\n      text: \"Product Name\",\n      datafield: \"productname\",\n      width: \"250\",\n      columntype: 'dropdownlist'\n    }],\n    filterable: true,\n    showfilterrow: true,\n    pageable: true,\n    autoheight: true,\n    sortable: true,\n    theme: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(JqxGrid, {\n    ref: myGrid2,\n    width: \"500\",\n    editable: true,\n    selectionmode: 'multiplecellsadvanced',\n    columns: [{\n      text: \"First Name\",\n      datafield: \"firstname\",\n      width: \"250\",\n      columntype: 'dropdownlist'\n    }, {\n      text: \"Product Name\",\n      datafield: \"productname\",\n      width: \"250\",\n      columntype: 'dropdownlist'\n    }],\n    filterable: true,\n    showfilterrow: true,\n    pageable: true,\n    autoheight: true,\n    sortable: true,\n    theme: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    style: {\n      float: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(JqxButton, {\n    style: {\n      marginTop: '5px'\n    },\n    onClick: exportar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Export to Excel\"), React.createElement(JqxButton, {\n    style: {\n      marginTop: '5px'\n    },\n    onClick: limpiar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Quitar Filtro\")), React.createElement(\"div\", {\n    style: {\n      float: 'left',\n      marginLeft: '10px',\n      marginTop: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Subir excel\"), React.createElement(\"input\", {\n    onChange: cargar,\n    name: \"excel\",\n    type: \"file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })));\n};\n\nexport default MyGrid;","map":{"version":3,"sources":["/home/adrian/Escritorio/abzFront/src/App.tsx"],"names":["React","useState","JqxGrid","jqx","JqxTabs","generatedata","JqxButton","MyGrid","myGrid","createRef","myGrid2","myTabs","data","setUser","typee","setType","source","datafields","name","type","datatype","localdata","adapter","dataAdapter","exportar","current","exportdata","limpiar","clearfilters","archivo","subido","subir","setSubir","modificar","fetch","cargar","event","newData","FormData","target","files","append","resp","method","body","then","json","console","log","alert","JSON","stringify","marginLeft","text","datafield","width","columntype","float","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport JqxGrid, { jqx } from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid\";\nimport JqxTabs from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxtabs'\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.base.css\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.material.css\";\nimport { generatedata } from \"./generatedata\";\nimport JqxButton from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons\";\n\nconst MyGrid: React.FC = () => {\n    const myGrid = React.createRef<JqxGrid>();\n    const myGrid2 = React.createRef<JqxGrid>();\n    const myTabs = React.createRef<JqxTabs>();\n    const [data, setUser] = useState(generatedata(100));\n    const [typee, setType] = useState('array')\n    const source: any = {\n        datafields: [\n            { name: 'firstname', type: 'string' },\n            { name: 'productname', type: 'string' },\n        ],\n        datatype: typee,\n        localdata: data\n\n    };\n\n    const adapter = new jqx.dataAdapter(source);\n\n    const exportar = () => {\n        //console.log('')\n        myGrid.current!.exportdata('xls', 'archivo')\n        \n\n    }\n\n    const limpiar = () => {\n        myGrid.current!.clearfilters();\n    }\n\n    const [subir, setSubir] = useState({\n        archivo: '',\n        subido: 0\n    })\n\n    const modificar = async () => {\n\n        //console.log(\"Modificar data\")\n        const data = await fetch('http://127.0.0.1:3333/archivo')//a partir del excel subido, leemos los datos\n\n\n\n    }\n\n    const cargar = async (event) => {\n        const newData = new FormData();\n        const data = event.target.files[0]\n        newData.append(\"excel\", data)\n        //console.log(data)\n        const resp = await fetch('http://127.0.0.1:3333/upload', {\n            method: \"POST\",\n            body: newData\n        }).then(resp => resp.json())\n        console.log(resp)\n        alert(JSON.stringify(resp))\n        if (resp) {\n            modificar()\n        } else {\n            return\n        }\n\n\n\n    }\n\n    return (\n        <div>\n\n            <JqxTabs ref={myTabs}\n                width={'35%'}\n            >\n            <ul style={{ marginLeft: 30, }}>\n                    <li>Sheet 1</li>\n                    <li>Sheet 2</li>\n                </ul>\n\n            <JqxGrid ref={myGrid}\n                width=\"500\"\n                source={adapter}\n                editable={true} selectionmode={'multiplecellsadvanced'}\n                columns={[\n                    {\n                        text: \"First Name\",\n                        datafield: \"firstname\",\n                        width: \"250\",\n                        columntype: 'dropdownlist'\n                    },\n                    {\n                        text: \"Product Name\",\n                        datafield: \"productname\",\n                        width: \"250\",\n                        columntype: 'dropdownlist'\n                    }\n                ]}\n                filterable={true}\n                showfilterrow={true}\n                pageable={true}\n                autoheight={true}\n                sortable={true}\n                theme=\"material\"\n            />\n\n                <JqxGrid ref={myGrid2}\n                width=\"500\"\n                \n                editable={true} selectionmode={'multiplecellsadvanced'}\n                columns={[\n                    {\n                        text: \"First Name\",\n                        datafield: \"firstname\",\n                        width: \"250\",\n                        columntype: 'dropdownlist'\n                    },\n                    {\n                        text: \"Product Name\",\n                        datafield: \"productname\",\n                        width: \"250\",\n                        columntype: 'dropdownlist'\n                    }\n                ]}\n                filterable={true}\n                showfilterrow={true}\n                pageable={true}\n                autoheight={true}\n                sortable={true}\n                theme=\"material\"\n            />\n\n            </JqxTabs>\n            <div style={{ float: 'left' }}>\n                <JqxButton style={{ marginTop: '5px' }} onClick={exportar}>Export to Excel</JqxButton>\n                <JqxButton style={{ marginTop: '5px' }} onClick={limpiar}>Quitar Filtro</JqxButton>\n\n            </div>\n            <div style={{ float: 'left', marginLeft: '10px', marginTop: '10px' }}>\n                <label>Subir excel</label>\n                <input onChange={cargar} name=\"excel\" type='file' />\n\n\n\n            </div>\n\n        </div>\n\n    );\n};\n\nexport default MyGrid;\n"]},"metadata":{},"sourceType":"module"}