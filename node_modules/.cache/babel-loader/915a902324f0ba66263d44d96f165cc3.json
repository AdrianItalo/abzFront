{"ast":null,"code":"import _slicedToArray from \"/home/adrian/Escritorio/abzFront/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/adrian/Escritorio/abzFront/src/App.tsx\";\nimport React, { useState } from \"react\";\nimport JqxGrid, { jqx } from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.base.css\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.material.css\";\nimport { generatedata } from \"./generatedata\";\nimport JqxButton from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons\";\n\nconst MyGrid = () => {\n  const myGrid = React.createRef();\n\n  const _useState = useState(generatedata(100)),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setUser = _useState2[1];\n\n  const _useState3 = useState('array'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        typee = _useState4[0],\n        setType = _useState4[1];\n\n  const source = {\n    datafields: [{\n      name: 'firstname',\n      type: 'string'\n    }, {\n      name: 'productname',\n      type: 'string'\n    }],\n    datatype: typee,\n    localdata: data\n  };\n  const adapter = new jqx.dataAdapter(source);\n\n  const exportar = () => {\n    //console.log('')\n    myGrid.current.exportdata('xls', 'archivo');\n  };\n\n  const _useState5 = useState({\n    archivo: '',\n    subido: 0\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        subir = _useState6[0],\n        setSubir = _useState6[1];\n\n  const modificar = async () => {\n    //console.log(\"Modificar data\")\n    const data = await fetch('http://127.0.0.1:3333/archivo'); //a partir del excel subido, leemos los datos\n  };\n\n  const cargar = async event => {\n    const newData = new FormData();\n    const data = event.target.files[0];\n    newData.append(\"excel\", data); //console.log(data)\n\n    const resp = await fetch('http://127.0.0.1:3333/upload', {\n      method: \"POST\",\n      body: newData\n    }).then(resp => resp.json());\n    console.log(resp);\n    alert(JSON.stringify(resp));\n\n    if (resp) {\n      modificar();\n    } else {\n      return;\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(JqxGrid, {\n    ref: myGrid,\n    width: \"20%\",\n    source: adapter,\n    editable: true,\n    selectionmode: 'multiplecellsadvanced',\n    columns: [{\n      text: \"First Name\",\n      datafield: \"firstname\",\n      width: \"1000\",\n      columntype: 'dropdownlist'\n    }, {\n      text: \"Product Name\",\n      datafield: \"productname\",\n      width: \"100\",\n      columntype: 'dropdownlist'\n    }],\n    pageable: true,\n    autoheight: true,\n    sortable: true,\n    theme: \"material\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      float: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(JqxButton, {\n    onClick: exportar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Export to Excel\")), React.createElement(\"div\", {\n    style: {\n      float: 'left',\n      marginLeft: '10px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Subir excel\"), React.createElement(\"input\", {\n    onChange: cargar,\n    name: \"excel\",\n    type: \"file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })));\n};\n\nexport default MyGrid;","map":{"version":3,"sources":["/home/adrian/Escritorio/abzFront/src/App.tsx"],"names":["React","useState","JqxGrid","jqx","generatedata","JqxButton","MyGrid","myGrid","createRef","data","setUser","typee","setType","source","datafields","name","type","datatype","localdata","adapter","dataAdapter","exportar","current","exportdata","archivo","subido","subir","setSubir","modificar","fetch","cargar","event","newData","FormData","target","files","append","resp","method","body","then","json","console","log","alert","JSON","stringify","text","datafield","width","columntype","float","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport JqxGrid, { jqx } from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid\";\nimport JqxInput from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxinput\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.base.css\";\nimport \"jqwidgets-scripts/jqwidgets/styles/jqx.material.css\";\nimport { generatedata } from \"./generatedata\";\nimport JqxButton from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons\";\n\nconst MyGrid: React.FC = () => {\n  const myGrid = React.createRef<JqxGrid>();\n  const [data, setUser] = useState(generatedata(100));\n  const [typee,setType] = useState('array')\n  const source: any = {\n    datafields: [\n        { name: 'firstname', type: 'string' },\n        { name: 'productname', type: 'string' },\n    ],\n    datatype: typee,\n    localdata: data\n\n  };\n  \n  const adapter = new jqx.dataAdapter(source);\n\n  const exportar = () => {\n      //console.log('')\n      myGrid.current!.exportdata('xls','archivo')\n    \n  }\n\n  const [subir,setSubir] = useState({\n      archivo : '',\n      subido: 0\n  })\n\n  const modificar = async () => {\n\n      //console.log(\"Modificar data\")\n      const data = await fetch('http://127.0.0.1:3333/archivo')//a partir del excel subido, leemos los datos\n      \n\n\n  }\n\n  const cargar =  async (event) => {\n      const newData = new FormData();\n      const data = event.target.files[0]\n      newData.append(\"excel\",data)\n      //console.log(data)\n      const resp = await fetch('http://127.0.0.1:3333/upload',{\n          method: \"POST\",\n          body: newData\n      }).then(resp => resp.json())\n      console.log(resp)\n      alert(JSON.stringify(resp))\n      if(resp){\n          modificar()\n      }else{\n          return\n      }\n\n\n      \n            \n      \n              \n  }\n\n  return (\n      <div>\n            <JqxGrid ref={myGrid}\n            width=\"20%\"\n            source={adapter}\n            editable={true} selectionmode={'multiplecellsadvanced'}\n            columns={[\n            {\n                text: \"First Name\",\n                datafield: \"firstname\",\n                width: \"1000\",\n                columntype: 'dropdownlist'\n            },\n            {\n                text: \"Product Name\",\n                datafield: \"productname\",\n                width: \"100\",\n                columntype: 'dropdownlist'\n            }\n            ]}\n            pageable={true}\n            autoheight={true}\n            sortable={true}\n            theme=\"material\"\n        />\n        <div style={{ float: 'left' }}>\n                <JqxButton onClick={exportar}>Export to Excel</JqxButton>\n                \n            </div>\n            <div style={{ float: 'left', marginLeft: '10px' }}>\n                        <label>Subir excel</label>\n                        <input onChange={cargar} name=\"excel\" type='file'/>\n                        \n\n\n            </div>\n\n      </div>\n    \n  );\n};\n\nexport default MyGrid;\n"]},"metadata":{},"sourceType":"module"}