{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/proyecto/my-app/src/App.tsx\";\nimport * as React from 'react';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport { generatedata } from './generatedata';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.beginEdit = React.createRef();\n    this.endEdit = React.createRef();\n    this.cellBeginEditEvent = this.cellBeginEditEvent.bind(this);\n    this.cellEndEditEvent = this.cellEndEditEvent.bind(this);\n    const source = {\n      datafields: [{\n        name: 'firstname',\n        type: 'string'\n      }, {\n        name: 'lastname',\n        type: 'string'\n      }, {\n        name: 'productname',\n        type: 'string'\n      }, {\n        name: 'available',\n        type: 'bool'\n      }, {\n        name: 'quantity',\n        type: 'number'\n      }, {\n        name: 'price',\n        type: 'number'\n      }, {\n        name: 'date',\n        type: 'date'\n      }],\n      datatype: 'array',\n      localdata: generatedata(500, false)\n    };\n    const columns = [{\n      text: 'First Name',\n      columntype: 'textbox',\n      datafield: 'firstname',\n      width: 120\n    }, {\n      text: 'Last Name',\n      datafield: 'lastname',\n      columntype: 'textbox',\n      width: 120\n    }, {\n      text: 'Product',\n      columntype: 'dropdownlist',\n      datafield: 'productname',\n      width: 195\n    }, {\n      text: 'Available',\n      datafield: 'available',\n      columntype: 'checkbox',\n      width: 67\n    }, {\n      align: 'right',\n      cellsalign: 'right',\n      cellsformat: 'd',\n      columntype: 'datetimeinput',\n      datafield: 'date',\n      text: 'Ship Date',\n      validation: (cell, value) => {\n        if (value === '') {\n          return true;\n        }\n\n        const year = value.getFullYear();\n\n        if (year >= 2017) {\n          return {\n            result: false,\n            message: 'Ship Date should be before 1/1/2017'\n          };\n        }\n\n        return true;\n      },\n      width: 110\n    }, {\n      align: 'right',\n      cellsalign: 'right',\n      columntype: 'numberinput',\n      createeditor: (row, cellvalue, editor) => {\n        editor.jqxNumberInput({\n          decimalDigits: 0,\n          digits: 3\n        });\n      },\n      datafield: 'quantity',\n      text: 'Quantity',\n      validation: (cell, value) => {\n        if (value < 0 || value > 150) {\n          return {\n            result: false,\n            message: 'Quantity should be in the 0-150 interval'\n          };\n        }\n\n        return true;\n      },\n      width: 70\n    }, {\n      align: 'right',\n      cellsalign: 'right',\n      cellsformat: 'c2',\n      columntype: 'numberinput',\n      createeditor: (row, cellvalue, editor) => {\n        editor.jqxNumberInput({\n          digits: 3\n        });\n      },\n      datafield: 'price',\n      text: 'Price',\n      validation: (cell, value) => {\n        if (value < 0 || value > 15) {\n          return {\n            result: false,\n            message: 'Price should be in the 0-15 interval'\n          };\n        }\n\n        return true;\n      }\n    }];\n    this.state = {\n      columns,\n      source: new jqx.dataAdapter(source)\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(JqxGrid, {\n      onCellbeginedit: this.cellBeginEditEvent,\n      onCellendedit: this.cellEndEditEvent // @ts-ignore\n      ,\n      source: this.state.source,\n      columns: this.state.columns,\n      editable: true,\n      enabletooltips: true,\n      selectionmode: 'multiplecellsadvanced',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        fontSize: '12px',\n        fontFamily: 'Verdana',\n        marginTop: '30px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: this.beginEdit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.endEdit,\n      style: {\n        marginTop: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })));\n  }\n\n  cellBeginEditEvent(event) {\n    const args = event.args;\n    this.beginEdit.current.innerHTML = 'Event Type: cellbeginedit, Column: ' + args.datafield + ', Row: ' + (1 + args.rowindex) + ', Value: ' + args.value;\n  }\n\n  cellEndEditEvent(event) {\n    const args = event.args;\n    this.endEdit.current.innerHTML = 'Event Type: cellendedit, Column: ' + args.datafield + ', Row: ' + (1 + args.rowindex) + ', Value: ' + args.value;\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/adrian/Escritorio/proyecto/my-app/src/App.tsx"],"names":["React","JqxGrid","jqx","generatedata","App","PureComponent","constructor","props","beginEdit","createRef","endEdit","cellBeginEditEvent","bind","cellEndEditEvent","source","datafields","name","type","datatype","localdata","columns","text","columntype","datafield","width","align","cellsalign","cellsformat","validation","cell","value","year","getFullYear","result","message","createeditor","row","cellvalue","editor","jqxNumberInput","decimalDigits","digits","state","dataAdapter","render","fontSize","fontFamily","marginTop","event","args","current","innerHTML","rowindex"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport { generatedata } from './generatedata';\nclass App extends React.PureComponent<{}, IGridProps> {\n    private beginEdit = React.createRef<HTMLDivElement>();\n    private endEdit = React.createRef<HTMLDivElement>();\n    constructor(props: {}) {\n        super(props);\n        this.cellBeginEditEvent = this.cellBeginEditEvent.bind(this);\n        this.cellEndEditEvent = this.cellEndEditEvent.bind(this);\n        const source: any = {\n            datafields: [\n                { name: 'firstname', type: 'string' },\n                { name: 'lastname', type: 'string' },\n                { name: 'productname', type: 'string' },\n                { name: 'available', type: 'bool' },\n                { name: 'quantity', type: 'number' },\n                { name: 'price', type: 'number' },\n                { name: 'date', type: 'date' }\n            ],\n            datatype: 'array',\n            localdata: generatedata(500, false)\n        };\n        const columns: IGridProps['columns'] = [\n            { text: 'First Name', columntype: 'textbox', datafield: 'firstname', width: 120 },\n            { text: 'Last Name', datafield: 'lastname', columntype: 'textbox', width: 120 },\n            { text: 'Product', columntype: 'dropdownlist', datafield: 'productname', width: 195 },\n            { text: 'Available', datafield: 'available', columntype: 'checkbox', width: 67 },\n            {\n                align: 'right', cellsalign: 'right', cellsformat: 'd', columntype: 'datetimeinput', datafield: 'date', text: 'Ship Date',  \n                validation: (cell: any, value: any): any => {\n                    if (value === '') {\n                        return true;\n                    }\n                    const year = value.getFullYear();\n                    if (year >= 2017) {\n                        return { result: false, message: 'Ship Date should be before 1/1/2017' };\n                    }\n                    return true;\n                },\n                width: 110\n            },\n            {\n                align: 'right', cellsalign: 'right', columntype: 'numberinput',\n                createeditor: (row: number, cellvalue: any, editor: any): void => {\n                    editor.jqxNumberInput({ decimalDigits: 0, digits: 3 });\n                },\n                datafield: 'quantity', text: 'Quantity',   \n                validation: (cell: any, value: number): any => {\n                    if (value < 0 || value > 150) {\n                        return { result: false, message: 'Quantity should be in the 0-150 interval' };\n                    }\n                    return true;\n                },\n                width: 70\n            },\n            {\n                align: 'right', cellsalign: 'right', cellsformat: 'c2', columntype: 'numberinput',\n                createeditor: (row: number, cellvalue: any, editor: any): void => {\n                    editor.jqxNumberInput({ digits: 3 });\n                },\n                datafield: 'price', text: 'Price',                \n                validation: (cell: any, value: number): any => {\n                    if (value < 0 || value > 15) {\n                        return { result: false, message: 'Price should be in the 0-15 interval' };\n                    }\n                    return true;\n                }                \n            }\n        ];\n        this.state = {\n            columns,\n            source: new jqx.dataAdapter(source)\n        }\n    }\n    public render() {\n        return (\n            <div>\n                <JqxGrid onCellbeginedit={this.cellBeginEditEvent} onCellendedit={this.cellEndEditEvent}\n                    // @ts-ignore\n                    source={this.state.source} columns={this.state.columns}\n                    editable={true} enabletooltips={true} selectionmode={'multiplecellsadvanced'} />\n                <div style={{ fontSize: '12px', fontFamily: 'Verdana', marginTop: '30px' }}>\n                    <div ref={this.beginEdit} />\n                    <div ref={this.endEdit} style={{ marginTop: '10px' }} />\n                </div>\n            </div>\n        );\n    }\n    private cellBeginEditEvent(event: any): void {\n        const args = event.args;\n        this.beginEdit.current!.innerHTML = 'Event Type: cellbeginedit, Column: ' + args.datafield + ', Row: ' + (1 + args.rowindex) + ', Value: ' + args.value;\n    }\n    private cellEndEditEvent(event: any): void {\n        const args = event.args;\n        this.endEdit.current!.innerHTML = 'Event Type: cellendedit, Column: ' + args.datafield + ', Row: ' + (1 + args.rowindex) + ', Value: ' + args.value;\n    }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}