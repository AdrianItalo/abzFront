{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/abzFront/src/App.tsx\";\nimport * as React from 'react';\nimport * as ReactDOM from \"react-dom\";\nimport JqxChart from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxchart';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport JqxTabs from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxtabs';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.myTabs = React.createRef();\n    this.gridElement = React.createRef();\n    this.chartElement = React.createRef();\n\n    this.initGrid = () => {\n      const source = {\n        datafields: [{\n          name: 'Date'\n        }, {\n          name: 'S&P 500'\n        }, {\n          name: 'NASDAQ'\n        }],\n        datatype: 'csv',\n        url: './../sampledata/nasdaq_vs_sp500.txt'\n      };\n      const dataAdapter = new jqx.dataAdapter(source, {\n        async: false,\n        loadError: (xhr, status, error) => {\n          alert('Error loading \"' + source.url + '\" : ' + error);\n        }\n      });\n      const columns = [{\n        cellsformat: 'd',\n        datafield: 'Date',\n        text: 'Date',\n        width: 250\n      }, {\n        datafield: 'S&P 500',\n        text: 'S&P 500',\n        width: 150\n      }, {\n        datafield: 'NASDAQ',\n        text: 'NASDAQ'\n      }];\n      const grid = React.createElement(JqxGrid, {\n        width: '100%',\n        height: '84%',\n        source: dataAdapter,\n        columns: columns,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      });\n      ReactDOM.render(grid, this.gridElement.current);\n    };\n\n    this.initChart = () => {\n      // prepare the data\n      const sourceChart = {\n        datafields: [{\n          name: 'Date'\n        }, {\n          name: 'S&P 500'\n        }, {\n          name: 'NASDAQ'\n        }],\n        datatype: 'csv',\n        url: './../sampledata/nasdaq_vs_sp500.txt'\n      };\n      const dataAdapterChart = new jqx.dataAdapter(sourceChart); // setup the chart\n\n      const chart = React.createElement(JqxChart, {\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        colorScheme: this.state.colorScheme,\n        description: this.state.description,\n        enableAnimations: this.state.enableAnimations,\n        padding: this.state.padding,\n        seriesGroups: this.state.seriesGroups,\n        showLegend: this.state.showLegend,\n        source: dataAdapterChart,\n        title: this.state.title,\n        titlePadding: this.state.titlePadding,\n        xAxis: this.state.xAxis,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      });\n      ReactDOM.render(chart, this.chartElement.current);\n    };\n\n    this.initWidgets = tab => {\n      switch (tab) {\n        case 0:\n          this.initGrid();\n          break;\n\n        case 1:\n          this.initChart();\n          break;\n      }\n    };\n\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    this.state = {\n      colorScheme: 'scheme04',\n      description: 'NASDAQ Composite compared to S&P 500',\n      enableAnimations: true,\n      padding: {\n        left: 10,\n        top: 5,\n        right: 10,\n        bottom: 5\n      },\n      seriesGroups: [{\n        series: [{\n          dataField: 'S&P 500',\n          displayText: 'S&P 500'\n        }, {\n          dataField: 'NASDAQ',\n          displayText: 'NASDAQ'\n        }],\n        type: 'line',\n        valueAxis: {\n          axisSize: 'auto',\n          tickMarks: {\n            color: '#888888',\n            visible: true\n          },\n          title: {\n            text: 'Daily Closing Price'\n          },\n          visible: true\n        }\n      }],\n      showLegend: true,\n      title: 'U.S. Stock Market Index Performance (2011)',\n      titlePadding: {\n        left: 90,\n        top: 0,\n        right: 0,\n        bottom: 10\n      },\n      xAxis: {\n        baseUnit: 'month',\n        dataField: 'Date',\n        formatFunction: value => {\n          return months[value.getMonth()].toString();\n        },\n        gridLines: {\n          color: '#888888',\n          interval: 3,\n          visible: true\n        },\n        tickMarks: {\n          color: '#888888',\n          interval: 1,\n          visible: true\n        },\n        toolTipFormatFunction: value => {\n          return (value.getDate() + '-' + months[value.getMonth()]).toString();\n        },\n        type: 'date',\n        unitInterval: 1,\n        valuesOnTicks: false\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(JqxTabs, {\n      ref: this.myTabs // @ts-ignore\n      ,\n      width: getWidth('tabs'),\n      height: 560,\n      initTabContent: this.initWidgets,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      style: {\n        marginLeft: 30\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        height: 20,\n        marginTop: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        float: \"left\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      width: \"16\",\n      height: \"16\",\n      src: \"./../images/catalogicon.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        marginLeft: 4,\n        verticalAlign: 'middle',\n        textAlign: \"center\",\n        float: \"left\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"US Indexes\"))), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        height: 20,\n        marginTop: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        float: \"left\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      width: \"16\",\n      height: \"16\",\n      src: \"./../images/pieicon.png\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        marginLeft: 4,\n        verticalAlign: 'middle',\n        textAlign: \"center\",\n        float: \"left\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"NASDAQ compared to S&P 500\")))), React.createElement(\"div\", {\n      style: {\n        overflow: \"hidden\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"jqxGrid\",\n      ref: this.gridElement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        marginTop: 10,\n        height: '15%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"The S&P 500 index finished 2011 less than a point away from where it ended 2010 -- 0.04 points down to be exact. That's the smallest annual change in history. At its peak in April, the S&P had climbed more than 8%. But by October, at the lowest levels of the year, it was down more than 12%. The Nasdaq, meanwhile, lost 1.8% for the year.\")), React.createElement(\"div\", {\n      style: {\n        overflow: \"hidden\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"jqxChart\",\n      ref: this.chartElement,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/adrian/Escritorio/abzFront/src/App.tsx"],"names":["React","ReactDOM","JqxChart","JqxGrid","jqx","JqxTabs","App","PureComponent","constructor","props","myTabs","createRef","gridElement","chartElement","initGrid","source","datafields","name","datatype","url","dataAdapter","async","loadError","xhr","status","error","alert","columns","cellsformat","datafield","text","width","grid","render","current","initChart","sourceChart","dataAdapterChart","chart","height","state","colorScheme","description","enableAnimations","padding","seriesGroups","showLegend","title","titlePadding","xAxis","initWidgets","tab","months","left","top","right","bottom","series","dataField","displayText","type","valueAxis","axisSize","tickMarks","color","visible","baseUnit","formatFunction","value","getMonth","toString","gridLines","interval","toolTipFormatFunction","getDate","unitInterval","valuesOnTicks","getWidth","marginLeft","marginTop","float","verticalAlign","textAlign","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from \"react-dom\";\nimport JqxChart, { IChartProps } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxchart';\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport JqxTabs from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxtabs';\nclass App extends React.PureComponent<{}, IChartProps> {\n    private myTabs = React.createRef<JqxTabs>();\n    private gridElement = React.createRef<HTMLDivElement>();\n    private chartElement = React.createRef<HTMLDivElement>();\n    constructor(props: {}) {\n        super(props);\n        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        this.state = {\n            colorScheme: 'scheme04',\n            description: 'NASDAQ Composite compared to S&P 500',\n            enableAnimations: true,\n            padding: { left: 10, top: 5, right: 10, bottom: 5 },\n            seriesGroups:\n                [\n                    {\n                        series: [\n                            { dataField: 'S&P 500', displayText: 'S&P 500' },\n                            { dataField: 'NASDAQ', displayText: 'NASDAQ' }\n                        ],\n                        type: 'line',\n                        valueAxis:\n                        {\n                            axisSize: 'auto',\n                            tickMarks: {\n                                color: '#888888',\n                                visible: true\n                            },\n                            title: {\n                                text: 'Daily Closing Price'\n                            },\n                            visible: true\n                        }\n                    }\n                ],\n            showLegend: true,\n            title: 'U.S. Stock Market Index Performance (2011)',\n            titlePadding: { left: 90, top: 0, right: 0, bottom: 10 },\n            xAxis:\n            {\n                baseUnit: 'month',\n                dataField: 'Date',\n                formatFunction: (value: any) => {\n                    return (months[value.getMonth()]).toString();\n                },\n                gridLines: {\n                    color: '#888888',\n                    interval: 3,\n                    visible: true\n                },\n                tickMarks: {\n                    color: '#888888',\n                    interval: 1,\n                    visible: true\n                },\n                toolTipFormatFunction: (value: any) => {\n                    return (value.getDate() + '-' + months[value.getMonth()]).toString();\n                },\n                type: 'date',\n                unitInterval: 1,\n                valuesOnTicks: false\n            }\n        }\n    }\n    public render() {\n        return (\n            <JqxTabs ref={this.myTabs}\n                // @ts-ignore\n                width={getWidth('tabs')}\n                height={560}\n                initTabContent={this.initWidgets}>\n                <ul>\n                    <li style={{ marginLeft: 30 }}>\n                        <div style={{ height: 20, marginTop: 5 }}>\n                            <div style={{ float: \"left\" }}>\n                                <img width=\"16\" height=\"16\" src=\"./../images/catalogicon.png\" />\n                            </div>\n                            <div style={{ marginLeft: 4, verticalAlign: 'middle', textAlign: \"center\", float: \"left\" }}>\n                                US Indexes\n                            </div>\n                        </div>\n                    </li>\n                    <li>\n                        <div style={{ height: 20, marginTop: 5 }}>\n                            <div style={{ float: \"left\" }}>\n                                <img width=\"16\" height=\"16\" src=\"./../images/pieicon.png\" />\n                            </div>\n                            <div style={{ marginLeft: 4, verticalAlign: 'middle', textAlign: \"center\", float: \"left\" }}>\n                                NASDAQ compared to S&P 500\n                            </div>\n                        </div>\n                    </li>\n                </ul>\n                <div style={{ overflow: \"hidden\" }}>\n                    <div id=\"jqxGrid\" ref={this.gridElement} />\n                    <div style={{ marginTop: 10, height: '15%' }}>\n                        The S&P 500 index finished 2011 less than a point away from where it ended 2010\n                        -- 0.04 points down to be exact. That's the smallest annual change in history. At\n                        its peak in April, the S&P had climbed more than 8%. But by October, at the lowest\n                        levels of the year, it was down more than 12%. The Nasdaq, meanwhile, lost 1.8%\n                        for the year.\n                </div>\n                </div>\n                <div style={{ overflow: \"hidden\" }}>\n                    <div id='jqxChart' ref={this.chartElement} style={{ width: \"100%\", height: \"100%\" }} />\n                </div>\n            </JqxTabs>\n        );\n    }\n    private initGrid = () => {\n        const source =\n        {\n            datafields: [\n                { name: 'Date' },\n                { name: 'S&P 500' },\n                { name: 'NASDAQ' }\n            ],\n            datatype: 'csv',\n            url: './../sampledata/nasdaq_vs_sp500.txt'\n        };\n        const dataAdapter = new jqx.dataAdapter(source, { async: false, loadError: (xhr: any, status: any, error: any) => { alert('Error loading \"' + source.url + '\" : ' + error); } });\n        const columns: IGridProps[\"columns\"] = [\n            { cellsformat: 'd', datafield: 'Date', text: 'Date', width: 250 },\n            { datafield: 'S&P 500', text: 'S&P 500', width: 150 },\n            { datafield: 'NASDAQ', text: 'NASDAQ' }\n        ];\n        const grid = <JqxGrid\n            width={'100%'}\n            height={'84%'}\n            source={dataAdapter}\n            columns={columns}\n        />;\n        ReactDOM.render(\n            grid,\n            this.gridElement.current!\n        );\n    };\n    private initChart = () => {\n        // prepare the data\n        const sourceChart =\n        {\n            datafields: [\n                { name: 'Date' },\n                { name: 'S&P 500' },\n                { name: 'NASDAQ' }\n            ],\n            datatype: 'csv',\n            url: './../sampledata/nasdaq_vs_sp500.txt'\n        };\n        const dataAdapterChart = new jqx.dataAdapter(sourceChart);\n        // setup the chart\n        const chart = <JqxChart style={{ width: '100%', height: '100%' }}\n            colorScheme={this.state.colorScheme}\n            description={this.state.description}\n            enableAnimations={this.state.enableAnimations}\n            padding={this.state.padding}\n            seriesGroups={this.state.seriesGroups}\n            showLegend={this.state.showLegend}\n            source={dataAdapterChart}\n            title={this.state.title}\n            titlePadding={this.state.titlePadding}\n            xAxis={this.state.xAxis}\n        />;\n        ReactDOM.render(\n            chart,\n            this.chartElement.current!\n        );\n    };\n    private initWidgets = (tab: any) => {\n        switch (tab) {\n            case 0:\n                this.initGrid();\n                break;\n            case 1:\n                this.initChart();\n                break;\n        }\n    };\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}