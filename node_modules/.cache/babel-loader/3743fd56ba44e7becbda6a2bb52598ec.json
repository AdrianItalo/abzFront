{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/proyecto/my-app/src/App.tsx\";\nimport * as React from 'react';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.myGrid = React.createRef();\n    this.eventLog = React.createRef();\n    this.myGridOnCellSelect = this.myGridOnCellSelect.bind(this);\n    this.myGridOnCellEndEdit = this.myGridOnCellEndEdit.bind(this);\n    const countries = [{\n      value: 'AF',\n      label: 'Afghanistan'\n    }, {\n      value: 'AL',\n      label: 'Albania'\n    }, {\n      value: 'DZ',\n      label: 'Algeria'\n    }, {\n      value: 'AR',\n      label: 'Argentina'\n    }, {\n      value: 'TR',\n      label: 'Turkey'\n    }, {\n      value: 'UA',\n      label: 'Ukraine'\n    }, {\n      value: 'AE',\n      label: 'United Arab Emirates'\n    }, {\n      value: 'UK',\n      label: 'United Kingdom'\n    }, {\n      value: 'US',\n      label: 'United States'\n    }];\n    const countriesSource = {\n      datafields: [{\n        name: 'label',\n        type: 'string'\n      }, {\n        name: 'value',\n        type: 'string'\n      }],\n      datatype: 'array',\n      localdata: countries\n    };\n    const countriesAdapter = new jqx.dataAdapter(countriesSource, {\n      autoBind: true\n    });\n    const source = {\n      datafields: [// name - determines the field's name.\n      // value - the field's value in the data source.\n      // values - specifies the field's values.\n      // values.source - specifies the foreign source. The expected value is an array.\n      // values.value - specifies the field's value in the foreign source. \n      // values.name - specifies the field's name in the foreign source. \n      // When the adapter is loaded, each record will have a field called 'Country'. The 'Country' for each record comes from the countriesAdapter where the record's 'countryCode' from gridAdapter matches to the 'value' from countriesAdapter. \n      {\n        name: 'Country',\n        value: 'countryCode',\n        values: {\n          source: countriesAdapter.records,\n          value: 'value',\n          name: 'label'\n        }\n      }, {\n        name: 'countryCode',\n        type: 'string'\n      }],\n      datatype: 'array',\n      localdata: [{\n        countryCode: 'UK'\n      }, {\n        countryCode: 'US'\n      }, {\n        countryCode: 'DE'\n      }, {\n        countryCode: 'FR'\n      }, {\n        countryCode: 'IN'\n      }, {\n        countryCode: 'HK'\n      }]\n    };\n    this.state = {\n      columns: [{\n        columntype: 'dropdownlist',\n        createeditor: (row, value, editor) => {\n          editor.jqxDropDownList({\n            width: '99%',\n            height: 27,\n            source: countriesAdapter,\n            displayMember: 'label',\n            valueMember: 'value'\n          });\n        },\n        datafield: 'countryCode',\n        displayfield: 'Country',\n        text: 'Country'\n      }],\n      source: new jqx.dataAdapter(source)\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(JqxGrid, {\n      ref: this.myGrid,\n      onCellselect: this.myGridOnCellSelect,\n      onCellendedit: this.myGridOnCellEndEdit,\n      width: 600,\n      source: this.state.source,\n      columns: this.state.columns,\n      editable: true,\n      autoheight: true,\n      selectionmode: 'singlecell',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.eventLog,\n      style: {\n        fontSize: '13px',\n        marginTop: '20px',\n        fontFamily: 'Verdana'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }));\n  }\n\n  myGridOnCellSelect(event) {\n    const column = this.myGrid.current.getcolumn(event.args.datafield);\n    const value = this.myGrid.current.getcellvalue(event.args.rowindex, column.datafield);\n    const displayValue = this.myGrid.current.getcellvalue(event.args.rowindex, column.displayfield);\n    this.eventLog.current.innerHTML = '<div>Selected Cell<br/>Row: ' + event.args.rowindex + ', Column: ' + column.text + ', Value: ' + value + ', Label: ' + displayValue + '</div>';\n  }\n\n  myGridOnCellEndEdit(event) {\n    const column = this.myGrid.current.getcolumn(event.args.datafield);\n    const container = this.eventLog.current;\n\n    if (column.displayfield !== column.datafield) {\n      container.innerHTML = '<div>Cell Edited:<br/>Index: ' + event.args.rowindex + ', Column: ' + column.text + '<br/>Value: ' + event.args.value.value + ', Label: ' + event.args.value.label + '<br/>Old Value: ' + event.args.oldvalue.value + ', Old Label: ' + event.args.oldvalue.label + '</div>';\n    } else {\n      container.innerHTML = '<div>Cell Edited:<br/>Row: ' + event.args.rowindex + ', Column: ' + column.text + '<br/>Value: ' + event.args.value + '<br/>Old Value: ' + event.args.oldvalue + '</div>';\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/adrian/Escritorio/proyecto/my-app/src/App.tsx"],"names":["React","JqxGrid","jqx","App","PureComponent","constructor","props","myGrid","createRef","eventLog","myGridOnCellSelect","bind","myGridOnCellEndEdit","countries","value","label","countriesSource","datafields","name","type","datatype","localdata","countriesAdapter","dataAdapter","autoBind","source","values","records","countryCode","state","columns","columntype","createeditor","row","editor","jqxDropDownList","width","height","displayMember","valueMember","datafield","displayfield","text","render","fontSize","marginTop","fontFamily","event","column","current","getcolumn","args","getcellvalue","rowindex","displayValue","innerHTML","container","oldvalue"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nclass App extends React.PureComponent<{}, IGridProps> {\n    private myGrid = React.createRef<JqxGrid>();\n    private eventLog = React.createRef<HTMLDivElement>();\n    constructor(props: {}) {\n        super(props);\n        this.myGridOnCellSelect = this.myGridOnCellSelect.bind(this);\n        this.myGridOnCellEndEdit = this.myGridOnCellEndEdit.bind(this);\n        const countries: any[] = [\n            { value: 'AF', label: 'Afghanistan' },\n            { value: 'AL', label: 'Albania' },\n            { value: 'DZ', label: 'Algeria' },\n            { value: 'AR', label: 'Argentina' },           \n            { value: 'TR', label: 'Turkey' },\n            { value: 'UA', label: 'Ukraine' },\n            { value: 'AE', label: 'United Arab Emirates' },\n            { value: 'UK', label: 'United Kingdom' },\n            { value: 'US', label: 'United States' }\n        ];\n        const countriesSource: any = {\n            datafields: [\n                { name: 'label', type: 'string' },\n                { name: 'value', type: 'string' }\n            ],\n            datatype: 'array',\n            localdata: countries\n        };\n        const countriesAdapter: any = new jqx.dataAdapter(countriesSource, { autoBind: true });\n        const source: any = {\n            datafields: [\n                // name - determines the field's name.\n                // value - the field's value in the data source.\n                // values - specifies the field's values.\n                // values.source - specifies the foreign source. The expected value is an array.\n                // values.value - specifies the field's value in the foreign source. \n                // values.name - specifies the field's name in the foreign source. \n                // When the adapter is loaded, each record will have a field called 'Country'. The 'Country' for each record comes from the countriesAdapter where the record's 'countryCode' from gridAdapter matches to the 'value' from countriesAdapter. \n                { name: 'Country', value: 'countryCode', values: { source: countriesAdapter.records, value: 'value', name: 'label' } },\n                { name: 'countryCode', type: 'string' }\n            ],\n            datatype: 'array',\n            localdata: [\n                { countryCode: 'UK' },\n                { countryCode: 'US' },\n                { countryCode: 'DE' },\n                { countryCode: 'FR' },\n                { countryCode: 'IN' },\n                { countryCode: 'HK' }\n            ]\n        };\n        this.state = {\n            columns: [\n                {\n                    columntype: 'dropdownlist', \n                    createeditor: (row: number, value: any, editor: any): void => {\n                        editor.jqxDropDownList({ width: '99%', height: 27, source: countriesAdapter, displayMember: 'label', valueMember: 'value' });\n                    },\n                    datafield: 'countryCode', displayfield: 'Country', text: 'Country'                 \n                }\n            ],\n            source: new jqx.dataAdapter(source)\n        }\n    }\n    public render() {\n        return (\n            <div>\n                <JqxGrid ref={this.myGrid}\n                    onCellselect={this.myGridOnCellSelect} onCellendedit={this.myGridOnCellEndEdit}\n                    width={600} source={this.state.source} columns={this.state.columns}\n                    editable={true} autoheight={true} selectionmode={'singlecell'} />\n                <div ref={this.eventLog} style={{ fontSize: '13px', marginTop: '20px', fontFamily: 'Verdana' }} />\n            </div>\n        );\n    }\n    private myGridOnCellSelect(event: any): void {\n        const column = this.myGrid.current!.getcolumn(event.args.datafield);\n        const value = this.myGrid.current!.getcellvalue(event.args.rowindex, column.datafield!);\n        const displayValue = this.myGrid.current!.getcellvalue(event.args.rowindex, column.displayfield!);\n        this.eventLog.current!.innerHTML = '<div>Selected Cell<br/>Row: ' + event.args.rowindex + ', Column: ' + column.text + ', Value: ' + value + ', Label: ' + displayValue + '</div>';\n    };\n    private myGridOnCellEndEdit(event: any): void {\n        const column = this.myGrid.current!.getcolumn(event.args.datafield);\n        const container = this.eventLog.current!;\n        if (column.displayfield !== column.datafield) {\n            container.innerHTML = '<div>Cell Edited:<br/>Index: ' + event.args.rowindex + ', Column: ' + column.text + '<br/>Value: ' + event.args.value.value + ', Label: ' + event.args.value.label\n                + '<br/>Old Value: ' + event.args.oldvalue.value + ', Old Label: ' + event.args.oldvalue.label + '</div>';\n        }\n        else {\n            container.innerHTML = '<div>Cell Edited:<br/>Row: ' + event.args.rowindex + ', Column: ' + column.text + '<br/>Value: ' + event.args.value\n                + '<br/>Old Value: ' + event.args.oldvalue + '</div>';\n        }\n    };\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}