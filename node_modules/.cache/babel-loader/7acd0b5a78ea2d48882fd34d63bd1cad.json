{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/proyecto/my-app/src/App.tsx\";\nimport * as React from 'react';\nimport './App.css';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport { generatedata } from './generatedata';\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.myGrid = React.createRef();\n    this.eventLog = React.createRef();\n    this.myGridOnCellSelect = this.myGridOnCellSelect.bind(this);\n    this.myGridOnCellEndEdit = this.myGridOnCellEndEdit.bind(this);\n    this.excelBtnOnClick = this.excelBtnOnClick.bind(this);\n    const source2 = {\n      datafields: [{\n        name: 'firstname',\n        type: 'string'\n      }, {\n        name: 'lastname',\n        type: 'string'\n      }],\n      datatype: 'array',\n      localdata: generatedata(100)\n    };\n    const countriesAdapter = new jqx.dataAdapter(source2, {\n      autoBind: true\n    });\n    this.state = {\n      columns2: [{\n        text: 'First Name',\n        datafield: 'firstname',\n        width: 250\n      }, {\n        text: 'Last Name',\n        datafield: 'lastname',\n        width: 150\n      }],\n      source2: new jqx.dataAdapter(source2)\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        overflow: 'hidden'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(JqxGrid, {\n      ref: this.myGrid,\n      width: '30%',\n      height: '100%',\n      source: this.state.source2,\n      columns: this.state.columns2,\n      sortable: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })), React.createElement(JqxButton, {\n      style: {\n        width: '100px'\n      },\n      onClick: this.excelBtnOnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Export to Excel\"));\n  }\n\n  excelBtnOnClick() {\n    this.myGrid.current.exportdata('xls', 'jqxGrid');\n  }\n\n  myGridOnCellSelect(event) {\n    const column = this.myGrid.current.getcolumn(event.args.datafield);\n    const value = this.myGrid.current.getcellvalue(event.args.rowindex, column.datafield);\n    const displayValue = this.myGrid.current.getcellvalue(event.args.rowindex, column.displayfield);\n    this.eventLog.current.innerHTML = '<div>Selected Cell<br/>Row: ' + event.args.rowindex + ', Column: ' + column.text + ', Value: ' + value + ', Label: ' + displayValue + '</div>';\n  }\n\n  myGridOnCellEndEdit(event) {\n    const column = this.myGrid.current.getcolumn(event.args.datafield);\n    const container = this.eventLog.current;\n\n    if (column.displayfield !== column.datafield) {\n      container.innerHTML = '<div>Cell Edited:<br/>Index: ' + event.args.rowindex + ', Column: ' + column.text + '<br/>Value: ' + event.args.value.value + ', Label: ' + event.args.value.label + '<br/>Old Value: ' + event.args.oldvalue.value + ', Old Label: ' + event.args.oldvalue.label + '</div>';\n    } else {\n      container.innerHTML = '<div>Cell Edited:<br/>Row: ' + event.args.rowindex + ', Column: ' + column.text + '<br/>Value: ' + event.args.value + '<br/>Old Value: ' + event.args.oldvalue + '</div>';\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/adrian/Escritorio/proyecto/my-app/src/App.tsx"],"names":["React","JqxGrid","jqx","generatedata","JqxButton","App","PureComponent","constructor","props","myGrid","createRef","eventLog","myGridOnCellSelect","bind","myGridOnCellEndEdit","excelBtnOnClick","source2","datafields","name","type","datatype","localdata","countriesAdapter","dataAdapter","autoBind","state","columns2","text","datafield","width","render","overflow","current","exportdata","event","column","getcolumn","args","value","getcellvalue","rowindex","displayValue","displayfield","innerHTML","container","label","oldvalue"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport './App.css';\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport JqxTabs from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxtabs';\nimport { generatedata } from './generatedata'\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nexport interface IState extends IGridProps {\n    source2: IGridProps['source'];\n    columns2: IGridProps['columns']\n}\nclass App extends React.PureComponent<{}, IState> {\n\n    private myGrid = React.createRef<JqxGrid>();\n    private eventLog = React.createRef<HTMLDivElement>();\n\n    constructor(props: {}) {\n        super(props);\n        this.myGridOnCellSelect = this.myGridOnCellSelect.bind(this);\n        this.myGridOnCellEndEdit = this.myGridOnCellEndEdit.bind(this);\n        this.excelBtnOnClick = this.excelBtnOnClick.bind(this);\n\n        \n        const source2: any = {\n            datafields: [\n                { name: 'firstname', type: 'string' },\n                { name: 'lastname', type: 'string' },\n\n            ],\n            datatype: 'array',\n            localdata: generatedata(100)\n        };\n        const countriesAdapter: any = new jqx.dataAdapter(source2, { autoBind: true });\n        this.state = {\n\n            columns2: [\n                \n                \n                { text: 'First Name', datafield: 'firstname', width: 250 },\n                { text: 'Last Name', datafield: 'lastname', width: 150 },\n\n            ],\n\n            source2: new jqx.dataAdapter(source2)\n        }\n    }\n    public render() {\n        return (\n            <div>\n\n                \n                <div style={{ overflow: 'hidden' }}>\n                    \n                    <JqxGrid \n                    ref={this.myGrid} width={'30%'} height={'100%'} \n                    source={this.state.source2} \n                    columns={this.state.columns2} \n                    sortable={true}\n                    />\n                </div>\n                               \n                \n            <JqxButton style={{width:'100px'}} onClick={this.excelBtnOnClick}>Export to Excel</JqxButton>\n            </div>\n        );\n    }\n\n    private excelBtnOnClick() {\n        this.myGrid.current!.exportdata('xls', 'jqxGrid');\n        \n    };\n\n    private myGridOnCellSelect(event: any): void {\n        const column = this.myGrid.current!.getcolumn(event.args.datafield);\n        const value = this.myGrid.current!.getcellvalue(event.args.rowindex, column.datafield!);\n        const displayValue = this.myGrid.current!.getcellvalue(event.args.rowindex, column.displayfield!);\n        this.eventLog.current!.innerHTML = '<div>Selected Cell<br/>Row: ' + event.args.rowindex + ', Column: ' + column.text + ', Value: ' + value + ', Label: ' + displayValue + '</div>';\n    };\n    private myGridOnCellEndEdit(event: any): void {\n        const column = this.myGrid.current!.getcolumn(event.args.datafield);\n        const container = this.eventLog.current!;\n        if (column.displayfield !== column.datafield) {\n            container.innerHTML = '<div>Cell Edited:<br/>Index: ' + event.args.rowindex + ', Column: ' + column.text + '<br/>Value: ' + event.args.value.value + ', Label: ' + event.args.value.label\n                + '<br/>Old Value: ' + event.args.oldvalue.value + ', Old Label: ' + event.args.oldvalue.label + '</div>';\n        }\n        else {\n            container.innerHTML = '<div>Cell Edited:<br/>Row: ' + event.args.rowindex + ', Column: ' + column.text + '<br/>Value: ' + event.args.value\n                + '<br/>Old Value: ' + event.args.oldvalue + '</div>';\n        }\n    };\n\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}