{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/proyecto/my-app/src/App.tsx\";\nimport * as React from 'react';\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.myGrid = React.createRef();\n    this.columns = [];\n    this.datafields = [];\n\n    this.numberrenderer = (row, column, value) => {\n      return '<div style=\"text-align: center; margin-top: 5px;\">' + (1 + value) + '</div>';\n    };\n\n    this.myBtnOnClick = this.myBtnOnClick.bind(this);\n    this.generateData = this.generateData.bind(this);\n    this.generateData();\n    const source = {\n      datafields: this.datafields,\n      totalrecords: 100,\n      unboundmode: true\n    };\n    this.state = {\n      columns: this.columns,\n      source: new jqx.dataAdapter(source)\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(JqxGrid, {\n      ref: this.myGrid // @ts-ignore\n      ,\n      width: getWidth('grid'),\n      source: this.state.source,\n      columns: this.state.columns,\n      columnsresize: true,\n      editable: true,\n      selectionmode: 'multiplecellsadvanced',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        marginTop: '20px',\n        float: 'left'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(JqxButton, {\n      onClick: this.myBtnOnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Export to Excel\")));\n  }\n\n  myBtnOnClick() {\n    this.myGrid.current.exportdata('xls', 'jqxGrid', false);\n  }\n\n  generateData() {\n    for (let i = 0; i < 26; i++) {\n      const text = String.fromCharCode(65 + i);\n\n      if (i === 0) {\n        const cssclass = 'jqx-widget-header';\n        this.columns[this.columns.length] = {\n          pinned: true,\n          exportable: false,\n          text: '',\n          columntype: 'number',\n          cellclassname: cssclass,\n          cellsrenderer: this.numberrenderer\n        };\n      }\n\n      this.datafields[this.datafields.length] = {\n        name: text\n      };\n      this.columns[this.columns.length] = {\n        text,\n        datafield: text,\n        width: 60,\n        align: 'center'\n      };\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/adrian/Escritorio/proyecto/my-app/src/App.tsx"],"names":["React","JqxButton","JqxGrid","jqx","App","PureComponent","constructor","props","myGrid","createRef","columns","datafields","numberrenderer","row","column","value","myBtnOnClick","bind","generateData","source","totalrecords","unboundmode","state","dataAdapter","render","getWidth","marginTop","float","current","exportdata","i","text","String","fromCharCode","cssclass","length","pinned","exportable","columntype","cellclassname","cellsrenderer","name","datafield","width","align"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport JqxButton from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons';\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nclass App extends React.PureComponent<{}, IGridProps> {\n    private myGrid = React.createRef<JqxGrid>();\n    private columns: IGridProps['columns'] = [];\n    private datafields: any[] = [];\n    constructor(props: {}) {\n        super(props);\n        this.myBtnOnClick = this.myBtnOnClick.bind(this);\n        this.generateData = this.generateData.bind(this);\n        this.generateData();\n        const source: any = {\n            datafields: this.datafields,\n            totalrecords: 100,\n            unboundmode: true\n        };\n        this.state = {\n            columns: this.columns,\n            source: new jqx.dataAdapter(source)\n        }\n    }\n    public render() {\n        return (\n            <div>\n                <JqxGrid ref={this.myGrid} \n                    // @ts-ignore\n                    width={getWidth('grid')} source={this.state.source} columns={this.state.columns}\n                    columnsresize={true} editable={true} selectionmode={'multiplecellsadvanced'} />\n                <div style={{ marginTop: '20px', float: 'left' }}>\n                    <JqxButton onClick={this.myBtnOnClick}>Export to Excel</JqxButton>\n                </div>\n            </div>\n        );\n    }\n    private numberrenderer = (row: number, column: any, value: any): string => {\n        return '<div style=\"text-align: center; margin-top: 5px;\">' + (1 + value) + '</div>';\n    };\n    private myBtnOnClick(): void {\n        this.myGrid.current!.exportdata('xls', 'jqxGrid', false);\n    };\n    private generateData(): void {\n        for (let i = 0; i < 26; i++) {\n            const text = String.fromCharCode(65 + i);\n            if (i === 0) {\n                const cssclass = 'jqx-widget-header';\n                this.columns![this.columns!.length] = { pinned: true, exportable: false, text: '', columntype: 'number', cellclassname: cssclass, cellsrenderer: this.numberrenderer };\n            }\n            this.datafields[this.datafields.length] = { name: text };\n            this.columns![this.columns!.length] = { text, datafield: text, width: 60, align: 'center' };\n        }\n    }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}