{"ast":null,"code":"export function generateData(rowscount) {\n  return generatedata(rowscount);\n}\nexport function generatedata(rowscount, hasNullValues) {\n  const data = new Array();\n\n  if (rowscount === undefined) {\n    rowscount = 100;\n  }\n\n  const firstNames = ['Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'];\n  const lastNames = ['Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'];\n  const productNames = ['Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Caramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'];\n\n  for (let i = 0; i < rowscount; i++) {\n    const row = {};\n    const productindex = Math.floor(Math.random() * productNames.length);\n    row.id = i;\n    row.firstname = firstNames[Math.floor(Math.random() * firstNames.length)];\n    row.lastname = lastNames[Math.floor(Math.random() * lastNames.length)];\n    row.name = row.firstname + ' ' + row.lastname;\n    row.productname = productNames[productindex];\n    data[i] = row;\n  }\n\n  return data;\n}","map":{"version":3,"sources":["/home/adrian/Escritorio/abzFront/src/generatedata.tsx"],"names":["generateData","rowscount","generatedata","hasNullValues","data","Array","undefined","firstNames","lastNames","productNames","i","row","productindex","Math","floor","random","length","id","firstname","lastname","name","productname"],"mappings":"AA2BA,OAAO,SAASA,YAAT,CAAsBC,SAAtB,EAA8D;AACjE,SAAOC,YAAY,CAACD,SAAD,CAAnB;AACH;AAED,OAAO,SAASC,YAAT,CAAsBD,SAAtB,EAA0CE,aAA1C,EAAuF;AAC1F,QAAMC,IAAwB,GAAG,IAAIC,KAAJ,EAAjC;;AAEA,MAAIJ,SAAS,KAAKK,SAAlB,EAA6B;AACzBL,IAAAA,SAAS,GAAG,GAAZ;AACH;;AAED,QAAMM,UAAU,GAChB,CACI,QADJ,EACc,OADd,EACuB,SADvB,EACkC,QADlC,EAC4C,OAD5C,EACqD,QADrD,EAC+D,QAD/D,EACyE,KADzE,EACgF,OADhF,EACyF,MADzF,EACiG,OADjG,EAC0G,QAD1G,EACoH,MADpH,EAC4H,MAD5H,EACoI,OADpI,EAC6I,QAD7I,EACuJ,SADvJ,EACkK,SADlK,CADA;AAKA,QAAMC,SAAS,GACf,CACI,QADJ,EACc,SADd,EACyB,OADzB,EACkC,QADlC,EAC4C,QAD5C,EACsD,UADtD,EACkE,MADlE,EAC0E,SAD1E,EACqF,QADrF,EAC+F,UAD/F,EAC2G,SAD3G,EACsH,MADtH,EAC8H,UAD9H,EAC0I,OAD1I,EACmJ,QADnJ,EAC6J,QAD7J,EACuK,OADvK,EACgL,QADhL,CADA;AAKA,QAAMC,YAAY,GAClB,CACI,WADJ,EACiB,WADjB,EAC8B,gBAD9B,EACgD,qBADhD,EACuE,aADvE,EACsF,uBADtF,EAC+G,eAD/G,EACgI,iBADhI,EACmJ,YADnJ,EACiK,kBADjK,EACqL,oBADrL,EAC2M,wBAD3M,CADA;;AAKA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAApB,EAA+BS,CAAC,EAAhC,EAAoC;AAChC,UAAMC,GAAG,GAAG,EAAZ;AAEA,UAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAAY,CAACO,MAAxC,CAArB;AAGAL,IAAAA,GAAG,CAACM,EAAJ,GAASP,CAAT;AAGAC,IAAAA,GAAG,CAACO,SAAJ,GAAgBX,UAAU,CAACM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,UAAU,CAACS,MAAtC,CAAD,CAA1B;AACAL,IAAAA,GAAG,CAACQ,QAAJ,GAAeX,SAAS,CAACK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,SAAS,CAACQ,MAArC,CAAD,CAAxB;AACAL,IAAAA,GAAG,CAACS,IAAJ,GAAWT,GAAG,CAACO,SAAJ,GAAgB,GAAhB,GAAsBP,GAAG,CAACQ,QAArC;AACAR,IAAAA,GAAG,CAACU,WAAJ,GAAkBZ,YAAY,CAACG,YAAD,CAA9B;AAGAR,IAAAA,IAAI,CAACM,CAAD,CAAJ,GAAUC,GAAV;AACH;;AAED,SAAOP,IAAP;AACH","sourcesContent":["interface IRowGenerateData {\r\n    id: number;\r\n    reportsto: number | null;\r\n    \r\n    firstname: string;\r\n    lastname: string;\r\n    name: string;\r\n    productname: string;\r\n    quantity: string | number;\r\n    total: string | number;\r\n    price: string | number;\r\n    date: Date;\r\n}\r\n\r\ninterface IRowGenerateOrdersData {\r\n    id: number | string;\r\n    parentid: number | null;\r\n    customer: string;\r\n    firstname: string;\r\n    lastname: string;\r\n    name: string;\r\n    price: string | number;\r\n    quantity: string | number;\r\n    total: string | number;\r\n    date: Date;\r\n}\r\n\r\nexport function generateData(rowscount?: number): IRowGenerateData[] {\r\n    return generatedata(rowscount);\r\n}\r\n\r\nexport function generatedata(rowscount?: number, hasNullValues?: boolean): IRowGenerateData[] {\r\n    const data: IRowGenerateData[] = new Array();\r\n\r\n    if (rowscount === undefined) {\r\n        rowscount = 100;\r\n    }\r\n\r\n    const firstNames =\r\n    [\r\n        'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\r\n    ];\r\n\r\n    const lastNames =\r\n    [\r\n        'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\r\n    ];\r\n\r\n    const productNames =\r\n    [\r\n        'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Caramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\r\n    ];\r\n\r\n    for (let i = 0; i < rowscount; i++) {\r\n        const row = {} as IRowGenerateData; \r\n\r\n        const productindex = Math.floor(Math.random() * productNames.length);\r\n        \r\n\r\n        row.id = i;\r\n      \r\n\r\n        row.firstname = firstNames[Math.floor(Math.random() * firstNames.length)];\r\n        row.lastname = lastNames[Math.floor(Math.random() * lastNames.length)];\r\n        row.name = row.firstname + ' ' + row.lastname; \r\n        row.productname = productNames[productindex];\r\n       \r\n        \r\n        data[i] = row;\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}