{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/proyecto/my-app/src/App.tsx\";\nimport * as React from 'react';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.myGrid = React.createRef();\n    this.eventLog = React.createRef();\n    this.myGridOnCellSelect = this.myGridOnCellSelect.bind(this);\n    this.myGridOnCellEndEdit = this.myGridOnCellEndEdit.bind(this);\n    const countries = [{\n      value: 'AF',\n      label: 'Afghanistan'\n    }, {\n      value: 'AL',\n      label: 'Albania'\n    }, {\n      value: 'DZ',\n      label: 'Algeria'\n    }, {\n      value: 'AR',\n      label: 'Argentina'\n    }, {\n      value: 'AM',\n      label: 'Armenia'\n    }, {\n      value: 'AU',\n      label: 'Australia'\n    }, {\n      value: 'AT',\n      label: 'Austria'\n    }, {\n      value: 'AZ',\n      label: 'Azerbaijan'\n    }, {\n      value: 'BS',\n      label: 'Bahamas'\n    }, {\n      value: 'BH',\n      label: 'Bahrain'\n    }, {\n      value: 'BD',\n      label: 'Bangladesh'\n    }, {\n      value: 'BB',\n      label: 'Barbados'\n    }, {\n      value: 'BY',\n      label: 'Belarus'\n    }, {\n      value: 'BE',\n      label: 'Belgium'\n    }, {\n      value: 'BZ',\n      label: 'Belize'\n    }, {\n      value: 'BJ',\n      label: 'Benin'\n    }, {\n      value: 'BM',\n      label: 'Bermuda'\n    }, {\n      value: 'BR',\n      label: 'Brazil'\n    }, {\n      value: 'BN',\n      label: 'Brunei'\n    }, {\n      value: 'BG',\n      label: 'Bulgaria'\n    }, {\n      value: 'CM',\n      label: 'Cameroon'\n    }, {\n      value: 'CA',\n      label: 'Canada'\n    }, {\n      value: 'CL',\n      label: 'Chile'\n    }, {\n      value: 'CN',\n      label: 'China'\n    }, {\n      value: 'CO',\n      label: 'Columbia'\n    }, {\n      value: 'CR',\n      label: 'Costa Rica'\n    }, {\n      value: 'HR',\n      label: 'Croatia (Hrvatska)'\n    }, {\n      value: 'CU',\n      label: 'Cuba'\n    }, {\n      value: 'CY',\n      label: 'Cyprus'\n    }, {\n      value: 'CZ',\n      label: 'Czech Republic'\n    }, {\n      value: 'DK',\n      label: 'Denmark'\n    }, {\n      value: 'TP',\n      label: 'East Timor'\n    }, {\n      value: 'EC',\n      label: 'Ecuador'\n    }, {\n      value: 'EG',\n      label: 'Egypt'\n    }, {\n      value: 'ER',\n      label: 'Eritrea'\n    }, {\n      value: 'EE',\n      label: 'Estonia'\n    }, {\n      value: 'ET',\n      label: 'Ethiopia'\n    }, {\n      value: 'FI',\n      label: 'Finland'\n    }, {\n      value: 'FR',\n      label: 'France'\n    }, {\n      value: 'DE',\n      label: 'Germany'\n    }, {\n      value: 'GR',\n      label: 'Greece'\n    }, {\n      value: 'HK',\n      label: 'Hong Kong'\n    }, {\n      value: 'HU',\n      label: 'Hungary'\n    }, {\n      value: 'IS',\n      label: 'Iceland'\n    }, {\n      value: 'IN',\n      label: 'India'\n    }, {\n      value: 'ID',\n      label: 'Indonesia'\n    }, {\n      value: 'IR',\n      label: 'Iran'\n    }, {\n      value: 'IQ',\n      label: 'Iraq'\n    }, {\n      value: 'IE',\n      label: 'Ireland'\n    }, {\n      value: 'IL',\n      label: 'Israel'\n    }, {\n      value: 'IT',\n      label: 'Italy'\n    }, {\n      value: 'JM',\n      label: 'Jamaica'\n    }, {\n      value: 'JP',\n      label: 'Japan'\n    }, {\n      value: 'MX',\n      label: 'Mexico'\n    }, {\n      value: 'MC',\n      label: 'Monaco'\n    }, {\n      value: 'MA',\n      label: 'Morocco'\n    }, {\n      value: 'NL',\n      label: 'Netherlands'\n    }, {\n      value: 'NZ',\n      label: 'New Zealand'\n    }, {\n      value: 'NE',\n      label: 'Niger'\n    }, {\n      value: 'NG',\n      label: 'Nigeria'\n    }, {\n      value: 'KP',\n      label: 'North Korea'\n    }, {\n      value: 'NO',\n      label: 'Norway'\n    }, {\n      value: 'PA',\n      label: 'Panama'\n    }, {\n      value: 'PE',\n      label: 'Peru'\n    }, {\n      value: 'PH',\n      label: 'Philippines'\n    }, {\n      value: 'PL',\n      label: 'Poland'\n    }, {\n      value: 'PT',\n      label: 'Portugal'\n    }, {\n      value: 'RO',\n      label: 'Romania'\n    }, {\n      value: 'RU',\n      label: 'Russia'\n    }, {\n      value: 'SA',\n      label: 'Saudi Arabia'\n    }, {\n      value: 'SK',\n      label: 'Slovak Republic'\n    }, {\n      value: 'SI',\n      label: 'Slovenia'\n    }, {\n      value: 'ZA',\n      label: 'South Africa'\n    }, {\n      value: 'KR',\n      label: 'South Korea'\n    }, {\n      value: 'ES',\n      label: 'Spain'\n    }, {\n      value: 'SE',\n      label: 'Sweden'\n    }, {\n      value: 'CH',\n      label: 'Switzerland'\n    }, {\n      value: 'TN',\n      label: 'Tunisia'\n    }, {\n      value: 'TR',\n      label: 'Turkey'\n    }, {\n      value: 'UA',\n      label: 'Ukraine'\n    }, {\n      value: 'AE',\n      label: 'United Arab Emirates'\n    }, {\n      value: 'UK',\n      label: 'United Kingdom'\n    }, {\n      value: 'US',\n      label: 'United States'\n    }];\n    const countriesSource = {\n      datafields: [{\n        name: 'label',\n        type: 'string'\n      }, {\n        name: 'value',\n        type: 'string'\n      }],\n      datatype: 'array',\n      localdata: countries\n    };\n    const countriesAdapter = new jqx.dataAdapter(countriesSource, {\n      autoBind: true\n    });\n    const source = {\n      datafields: [// name - determines the field's name.\n      // value - the field's value in the data source.\n      // values - specifies the field's values.\n      // values.source - specifies the foreign source. The expected value is an array.\n      // values.value - specifies the field's value in the foreign source. \n      // values.name - specifies the field's name in the foreign source. \n      // When the adapter is loaded, each record will have a field called 'Country'. The 'Country' for each record comes from the countriesAdapter where the record's 'countryCode' from gridAdapter matches to the 'value' from countriesAdapter. \n      {\n        name: 'Country',\n        value: 'countryCode',\n        values: {\n          source: countriesAdapter.records,\n          value: 'value',\n          name: 'label'\n        }\n      }, {\n        name: 'countryCode',\n        type: 'string'\n      }],\n      datatype: 'array',\n      localdata: [{\n        countryCode: 'UK'\n      }, {\n        countryCode: 'US'\n      }, {\n        countryCode: 'DE'\n      }, {\n        countryCode: 'FR'\n      }, {\n        countryCode: 'IN'\n      }, {\n        countryCode: 'HK'\n      }]\n    };\n    this.state = {\n      columns: [{\n        columntype: 'combobox',\n        createeditor: (row, value, editor) => {\n          editor.jqxComboBox({\n            source: countriesAdapter,\n            displayMember: 'label',\n            valueMember: 'value'\n          });\n        },\n        datafield: 'countryCode',\n        displayfield: 'Country',\n        text: 'Country'\n      }],\n      source: new jqx.dataAdapter(source)\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(JqxGrid, {\n      ref: this.myGrid,\n      onCellselect: this.myGridOnCellSelect,\n      onCellendedit: this.myGridOnCellEndEdit // @ts-ignore\n      ,\n      source: this.state.source,\n      columns: this.state.columns,\n      editable: true,\n      autoheight: true,\n      selectionmode: 'singlecell',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      ref: this.eventLog,\n      style: {\n        fontSize: '13px',\n        marginTop: '20px',\n        fontFamily: 'Verdana'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }));\n  }\n\n  myGridOnCellSelect(event) {\n    const column = this.myGrid.current.getcolumn(event.args.datafield);\n    const value = this.myGrid.current.getcellvalue(event.args.rowindex, column.datafield);\n    const displayValue = this.myGrid.current.getcellvalue(event.args.rowindex, column.displayfield);\n    this.eventLog.current.innerHTML = '<div>Selected Cell<br/>Row: ' + event.args.rowindex + ', Column: ' + column.text + ', Value: ' + value + ', Label: ' + displayValue + '</div>';\n  }\n\n  myGridOnCellEndEdit(event) {\n    const column = this.myGrid.current.getcolumn(event.args.datafield);\n    const container = this.eventLog.current;\n\n    if (column.displayfield !== column.datafield) {\n      container.innerHTML = '<div>Cell Edited:<br/>Index: ' + event.args.rowindex + ', Column: ' + column.text + '<br/>Value: ' + event.args.value.value + ', Label: ' + event.args.value.label + '<br/>Old Value: ' + event.args.oldvalue.value + ', Old Label: ' + event.args.oldvalue.label + '</div>';\n    } else {\n      container.innerHTML = '<div>Cell Edited:<br/>Row: ' + event.args.rowindex + ', Column: ' + column.text + '<br/>Value: ' + event.args.value + '<br/>Old Value: ' + event.args.oldvalue + '</div>';\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/adrian/Escritorio/proyecto/my-app/src/App.tsx"],"names":["React","JqxGrid","jqx","App","PureComponent","constructor","props","myGrid","createRef","eventLog","myGridOnCellSelect","bind","myGridOnCellEndEdit","countries","value","label","countriesSource","datafields","name","type","datatype","localdata","countriesAdapter","dataAdapter","autoBind","source","values","records","countryCode","state","columns","columntype","createeditor","row","editor","jqxComboBox","displayMember","valueMember","datafield","displayfield","text","render","fontSize","marginTop","fontFamily","event","column","current","getcolumn","args","getcellvalue","rowindex","displayValue","innerHTML","container","oldvalue"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nclass App extends React.PureComponent<{}, IGridProps> {\n    private myGrid = React.createRef<JqxGrid>();\n    private eventLog = React.createRef<HTMLDivElement>();\n    constructor(props: {}) {\n        super(props);\n        this.myGridOnCellSelect = this.myGridOnCellSelect.bind(this);\n        this.myGridOnCellEndEdit = this.myGridOnCellEndEdit.bind(this);\n        const countries: any[] = [\n            { value: 'AF', label: 'Afghanistan' },\n            { value: 'AL', label: 'Albania' },\n            { value: 'DZ', label: 'Algeria' },\n            { value: 'AR', label: 'Argentina' },\n            { value: 'AM', label: 'Armenia' },\n            { value: 'AU', label: 'Australia' },\n            { value: 'AT', label: 'Austria' },\n            { value: 'AZ', label: 'Azerbaijan' },\n            { value: 'BS', label: 'Bahamas' },\n            { value: 'BH', label: 'Bahrain' },\n            { value: 'BD', label: 'Bangladesh' },\n            { value: 'BB', label: 'Barbados' },\n            { value: 'BY', label: 'Belarus' },\n            { value: 'BE', label: 'Belgium' },\n            { value: 'BZ', label: 'Belize' },\n            { value: 'BJ', label: 'Benin' },\n            { value: 'BM', label: 'Bermuda' },\n            { value: 'BR', label: 'Brazil' },\n            { value: 'BN', label: 'Brunei' },\n            { value: 'BG', label: 'Bulgaria' },\n            { value: 'CM', label: 'Cameroon' },\n            { value: 'CA', label: 'Canada' },\n            { value: 'CL', label: 'Chile' },\n            { value: 'CN', label: 'China' },\n            { value: 'CO', label: 'Columbia' },\n            { value: 'CR', label: 'Costa Rica' },\n            { value: 'HR', label: 'Croatia (Hrvatska)' },\n            { value: 'CU', label: 'Cuba' },\n            { value: 'CY', label: 'Cyprus' },\n            { value: 'CZ', label: 'Czech Republic' },\n            { value: 'DK', label: 'Denmark' },\n            { value: 'TP', label: 'East Timor' },\n            { value: 'EC', label: 'Ecuador' },\n            { value: 'EG', label: 'Egypt' },\n            { value: 'ER', label: 'Eritrea' },\n            { value: 'EE', label: 'Estonia' },\n            { value: 'ET', label: 'Ethiopia' },\n            { value: 'FI', label: 'Finland' },\n            { value: 'FR', label: 'France' },\n            { value: 'DE', label: 'Germany' },\n            { value: 'GR', label: 'Greece' },\n            { value: 'HK', label: 'Hong Kong' },\n            { value: 'HU', label: 'Hungary' },\n            { value: 'IS', label: 'Iceland' },\n            { value: 'IN', label: 'India' },\n            { value: 'ID', label: 'Indonesia' },\n            { value: 'IR', label: 'Iran' },\n            { value: 'IQ', label: 'Iraq' },\n            { value: 'IE', label: 'Ireland' },\n            { value: 'IL', label: 'Israel' },\n            { value: 'IT', label: 'Italy' },\n            { value: 'JM', label: 'Jamaica' },\n            { value: 'JP', label: 'Japan' },\n            { value: 'MX', label: 'Mexico' },\n            { value: 'MC', label: 'Monaco' },\n            { value: 'MA', label: 'Morocco' },\n            { value: 'NL', label: 'Netherlands' },\n            { value: 'NZ', label: 'New Zealand' },\n            { value: 'NE', label: 'Niger' },\n            { value: 'NG', label: 'Nigeria' },\n            { value: 'KP', label: 'North Korea' },\n            { value: 'NO', label: 'Norway' },\n            { value: 'PA', label: 'Panama' },\n            { value: 'PE', label: 'Peru' },\n            { value: 'PH', label: 'Philippines' },\n            { value: 'PL', label: 'Poland' },\n            { value: 'PT', label: 'Portugal' },\n            { value: 'RO', label: 'Romania' },\n            { value: 'RU', label: 'Russia' },\n            { value: 'SA', label: 'Saudi Arabia' },\n            { value: 'SK', label: 'Slovak Republic' },\n            { value: 'SI', label: 'Slovenia' },\n            { value: 'ZA', label: 'South Africa' },\n            { value: 'KR', label: 'South Korea' },\n            { value: 'ES', label: 'Spain' },\n            { value: 'SE', label: 'Sweden' },\n            { value: 'CH', label: 'Switzerland' },\n            { value: 'TN', label: 'Tunisia' },\n            { value: 'TR', label: 'Turkey' },\n            { value: 'UA', label: 'Ukraine' },\n            { value: 'AE', label: 'United Arab Emirates' },\n            { value: 'UK', label: 'United Kingdom' },\n            { value: 'US', label: 'United States' }\n        ];\n        const countriesSource: any = {\n            datafields: [\n                { name: 'label', type: 'string' },\n                { name: 'value', type: 'string' }\n            ],\n            datatype: 'array',\n            localdata: countries\n        };\n        const countriesAdapter: any = new jqx.dataAdapter(countriesSource, { autoBind: true });\n        const source: any = {\n            datafields: [\n                // name - determines the field's name.\n                // value - the field's value in the data source.\n                // values - specifies the field's values.\n                // values.source - specifies the foreign source. The expected value is an array.\n                // values.value - specifies the field's value in the foreign source. \n                // values.name - specifies the field's name in the foreign source. \n                // When the adapter is loaded, each record will have a field called 'Country'. The 'Country' for each record comes from the countriesAdapter where the record's 'countryCode' from gridAdapter matches to the 'value' from countriesAdapter. \n                { name: 'Country', value: 'countryCode', values: { source: countriesAdapter.records, value: 'value', name: 'label' } },\n                { name: 'countryCode', type: 'string' }\n            ],\n            datatype: 'array',\n            localdata: [\n                { countryCode: 'UK' },\n                { countryCode: 'US' },\n                { countryCode: 'DE' },\n                { countryCode: 'FR' },\n                { countryCode: 'IN' },\n                { countryCode: 'HK' }\n            ]\n        };\n        this.state = {\n            columns: [\n                {\n                    columntype: 'combobox', \n                    createeditor: (row: number, value: any, editor: any): void => {\n                        editor.jqxComboBox({ source: countriesAdapter, displayMember: 'label', valueMember: 'value' });\n                    },\n                    datafield: 'countryCode', displayfield: 'Country', text: 'Country'                 \n                }\n            ],\n            source: new jqx.dataAdapter(source)\n        }\n    }\n    public render() {\n        return (\n            <div>\n                <JqxGrid ref={this.myGrid}\n                    onCellselect={this.myGridOnCellSelect} onCellendedit={this.myGridOnCellEndEdit}\n                    // @ts-ignore\n                    source={this.state.source} columns={this.state.columns}\n                    editable={true} autoheight={true} selectionmode={'singlecell'} />\n                <div ref={this.eventLog} style={{ fontSize: '13px', marginTop: '20px', fontFamily: 'Verdana' }} />\n            </div>\n        );\n    }\n    private myGridOnCellSelect(event: any): void {\n        const column = this.myGrid.current!.getcolumn(event.args.datafield);\n        const value = this.myGrid.current!.getcellvalue(event.args.rowindex, column.datafield!);\n        const displayValue = this.myGrid.current!.getcellvalue(event.args.rowindex, column.displayfield!);\n        this.eventLog.current!.innerHTML = '<div>Selected Cell<br/>Row: ' + event.args.rowindex + ', Column: ' + column.text + ', Value: ' + value + ', Label: ' + displayValue + '</div>';\n    };\n    private myGridOnCellEndEdit(event: any): void {\n        const column = this.myGrid.current!.getcolumn(event.args.datafield);\n        const container = this.eventLog.current!;\n        if (column.displayfield !== column.datafield) {\n            container.innerHTML = '<div>Cell Edited:<br/>Index: ' + event.args.rowindex + ', Column: ' + column.text + '<br/>Value: ' + event.args.value.value + ', Label: ' + event.args.value.label\n                + '<br/>Old Value: ' + event.args.oldvalue.value + ', Old Label: ' + event.args.oldvalue.label + '</div>';\n        }\n        else {\n            container.innerHTML = '<div>Cell Edited:<br/>Row: ' + event.args.rowindex + ', Column: ' + column.text + '<br/>Value: ' + event.args.value\n                + '<br/>Old Value: ' + event.args.oldvalue + '</div>';\n        }\n    };\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}