{"ast":null,"code":"import _slicedToArray from \"/home/adrian/Escritorio/abzFront/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/adrian/Escritorio/abzFront/src/App.tsx\";\nimport JqxButton from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons\";\nimport JqxGrid, { jqx } from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid\";\nimport React, { useState } from \"react\";\nimport { generateData } from \"./generatedata\";\nimport JqxFileUpload from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxfileupload';\n\nconst MyGrid = () => {\n  const myGrid = React.createRef();\n  const source = {\n    datafields: [{\n      name: 'name',\n      type: 'string'\n    }, {\n      name: 'productname',\n      type: 'string'\n    }],\n    datatype: 'array',\n    localdata: generateData(100)\n  };\n  const source2 = {\n    datafields: [{\n      name: 'name',\n      type: 'string'\n    }, {\n      name: 'productname',\n      type: 'string'\n    }],\n    url: 'http://127.0.0.1:3333/leer',\n    datatype: 'json'\n  };\n  const adapter = new jqx.dataAdapter(source);\n  const adapter2 = new jqx.dataAdapter(source2);\n\n  const exportar = () => {\n    myGrid.current.exportdata('xls', 'archivo');\n  };\n\n  const subir = () => {\n    setAdap(adapter2);\n  };\n\n  const _useState = useState(adapter),\n        _useState2 = _slicedToArray(_useState, 2),\n        adap = _useState2[0],\n        setAdap = _useState2[1];\n\n  const cargar = async event => {\n    const newData = new FormData();\n    const data = event.target.files[0];\n    newData.append(\"excel\", data); //console.log(data)\n\n    const resp = await fetch('http://127.0.0.1:3333/upload', {\n      method: \"POST\",\n      body: newData\n    }).then(resp => resp.json()); //console.log(resp)\n    //alert(JSON.stringify(resp))\n\n    if (resp) {\n      alert(\"subido\");\n      setAdap(adapter2);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(JqxGrid, {\n    ref: myGrid,\n    sortable: true,\n    source: adap,\n    selectionmode: 'multiplecellsadvanced',\n    editable: true,\n    columns: [{\n      text: \"name\",\n      datafield: \"name\",\n      width: \"250\"\n    }, {\n      text: \"productname\",\n      datafield: \"productname\",\n      width: \"250\",\n      columntype: 'dropdownlist'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    style: {\n      float: 'left'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(JqxButton, {\n    style: {\n      marginTop: '5px'\n    },\n    onClick: exportar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Export to Excel\"), React.createElement(JqxButton, {\n    style: {\n      marginTop: '5px'\n    },\n    onClick: subir,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Subir\"), React.createElement(\"input\", {\n    style: {\n      marginTop: '5px'\n    },\n    onChange: cargar,\n    name: \"excel\",\n    type: \"file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), React.createElement(JqxFileUpload, {\n    ref: \"myFileUpload\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })));\n};\n\nexport default MyGrid;","map":{"version":3,"sources":["/home/adrian/Escritorio/abzFront/src/App.tsx"],"names":["JqxButton","JqxGrid","jqx","React","useState","generateData","JqxFileUpload","MyGrid","myGrid","createRef","source","datafields","name","type","datatype","localdata","source2","url","adapter","dataAdapter","adapter2","exportar","current","exportdata","subir","setAdap","adap","cargar","event","newData","FormData","data","target","files","append","resp","fetch","method","body","then","json","alert","text","datafield","width","columntype","float","marginTop"],"mappings":"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","sourcesContent":["import JqxButton from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxbuttons\";\nimport JqxGrid, { jqx } from \"jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid\";\nimport React, { useState } from \"react\";\nimport { generateData } from \"./generatedata\";\n\nimport JqxFileUpload, { IFileUploadProps } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxfileupload';\nconst MyGrid = () => {\n\n    const myGrid = React.createRef<JqxGrid>();\n\n    const source = {\n        datafields: [\n            { name: 'name', type: 'string' },\n            { name: 'productname', type: 'string' },\n        ],\n        datatype: 'array',\n        localdata: generateData(100)\n\n    };\n\n    const source2 = {\n        datafields: [\n            { name: 'name', type: 'string' },\n            { name: 'productname', type: 'string' },\n        ],\n        url:'http://127.0.0.1:3333/leer',\n        datatype:'json'\n    }      \n    \n    const adapter = new jqx.dataAdapter(source);\n    const adapter2 = new jqx.dataAdapter(source2);\n    \n    const exportar = () => {\n        myGrid.current!.exportdata('xls','archivo')\n    }\n        \n    const subir = ( ) => {\n\n        setAdap(adapter2)\n    }\n\n    const [adap,setAdap] = useState(adapter)\n\n    const cargar =  async (event) => {\n        const newData = new FormData();\n        const data = event.target.files[0]\n        newData.append(\"excel\",data)\n        //console.log(data)\n        const resp = await fetch('http://127.0.0.1:3333/upload',{\n            method: \"POST\",\n            body: newData\n        }).then(resp => resp.json())\n        //console.log(resp)\n        //alert(JSON.stringify(resp))\n\n        if(resp){\n            alert(\"subido\")\n            setAdap(adapter2)\n        }\n    }\n\n\n    return(\n        <div>\n            <JqxGrid ref={myGrid}\n\n                sortable={true}  \n                        \n                source={adap}\n                selectionmode={'multiplecellsadvanced'}\n                editable={true}\n                columns={[{\n                    text: \"name\",\n                    datafield: \"name\",\n                    width: \"250\",\n                    \n                },\n                {\n                    text: \"productname\",\n                    datafield: \"productname\",\n                    width: \"250\",\n                    columntype: 'dropdownlist'\n                }]}\n                \n\n            >\n            </JqxGrid>\n            <div style={{ float: 'left' }}>\n\n            <JqxButton style={{ marginTop: '5px' }} onClick={exportar}>Export to Excel</JqxButton>\n\n            <JqxButton style={{ marginTop: '5px' }} onClick={subir}>Subir</JqxButton>\n\n            <input style={{ marginTop: '5px' }} onChange={cargar} name=\"excel\" type='file'/>\n\n            <JqxFileUpload ref=\"myFileUpload\" />\n            \n\n            </div>\n        </div>\n    )\n}\n\nexport default MyGrid;"]},"metadata":{},"sourceType":"module"}