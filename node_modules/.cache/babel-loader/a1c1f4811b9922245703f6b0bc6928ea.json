{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/abzFront/src/App.tsx\";\nimport * as React from 'react';\nimport 'jqwidgets-scripts/jqwidgets/styles/jqx.base.css';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.myGrid = React.createRef();\n    const source = {\n      localdata: [['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'], ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'], ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']],\n      datafields: [{\n        name: 'ContactName',\n        type: 'string',\n        map: '0'\n      }, {\n        name: 'Title',\n        type: 'string',\n        map: '1'\n      }, {\n        name: 'City',\n        type: 'string',\n        map: '2'\n      }, {\n        name: 'Country',\n        type: 'string',\n        map: '3'\n      }],\n      datatype: 'array'\n    };\n    this.state = {\n      source: new jqx.dataAdapter(source),\n      columns: [{\n        text: 'Contact Name',\n        datafield: 'ContactName'\n      }, {\n        text: 'Contact Title',\n        datafield: 'Title'\n      }, {\n        text: 'City',\n        datafield: 'City'\n      }, {\n        text: 'Country',\n        datafield: 'Country'\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.myGrid.current.setOptions({\n      filterable: true\n    });\n  }\n\n  render() {\n    return React.createElement(JqxGrid, {\n      ref: this.myGrid,\n      onFilter: this.onFilter,\n      width: 850,\n      source: this.state.source,\n      columns: this.state.columns,\n      autoheight: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    });\n  }\n\n  onFilter(e) {\n    alert('do something...');\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/adrian/Escritorio/abzFront/src/App.tsx"],"names":["React","JqxGrid","jqx","App","PureComponent","constructor","props","myGrid","createRef","source","localdata","datafields","name","type","map","datatype","state","dataAdapter","columns","text","datafield","componentDidMount","current","setOptions","filterable","render","onFilter","e","alert"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAO,iDAAP;AACA,OAAOC,OAAP,IAA8BC,GAA9B,QAAyC,+CAAzC;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,aAAxB,CAAsD;AAGpDC,EAAAA,WAAW,CAACC,KAAD,EAAY;AACrB,UAAMA,KAAN;AADqB,SAFfC,MAEe,GAFNP,KAAK,CAACQ,SAAN,EAEM;AAGrB,UAAMC,MAAM,GAAG;AACXC,MAAAA,SAAS,EAAE,CACT,CAAE,cAAF,EAAkB,sBAAlB,EAA0C,QAA1C,EAAoD,SAApD,CADS,EAET,CAAE,cAAF,EAAkB,OAAlB,EAA2B,YAA3B,EAAyC,QAAzC,CAFS,EAGT,CAAE,gBAAF,EAAoB,OAApB,EAA6B,YAA7B,EAA2C,QAA3C,CAHS,CADA;AAMXC,MAAAA,UAAU,EAAE,CACV;AAAEC,QAAAA,IAAI,EAAE,aAAR;AAAuBC,QAAAA,IAAI,EAAE,QAA7B;AAAuCC,QAAAA,GAAG,EAAE;AAA5C,OADU,EAEV;AAAEF,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,IAAI,EAAE,QAAvB;AAAiCC,QAAAA,GAAG,EAAE;AAAtC,OAFU,EAGV;AAAEF,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA,IAAI,EAAE,QAAtB;AAAgCC,QAAAA,GAAG,EAAE;AAArC,OAHU,EAIV;AAAEF,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,IAAI,EAAE,QAAzB;AAAmCC,QAAAA,GAAG,EAAE;AAAxC,OAJU,CAND;AAYXC,MAAAA,QAAQ,EAAE;AAZC,KAAf;AAeA,SAAKC,KAAL,GAAa;AACTP,MAAAA,MAAM,EAAE,IAAIP,GAAG,CAACe,WAAR,CAAoBR,MAApB,CADC;AAETS,MAAAA,OAAO,EAAE,CACP;AAAEC,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,SAAS,EAAE;AAAnC,OADO,EAEP;AAAED,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,SAAS,EAAE;AAApC,OAFO,EAGP;AAAED,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA,SAAS,EAAE;AAA3B,OAHO,EAIP;AAAED,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,SAAS,EAAE;AAA9B,OAJO;AAFA,KAAb;AASD;;AAEMC,EAAAA,iBAAP,GAAiC;AAC/B,SAAKd,MAAL,CAAYe,OAAZ,CAAqBC,UAArB,CAAgC;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAhC;AACD;;AAEMC,EAAAA,MAAP,GAAgB;AACd,WACE,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAE,KAAKlB,MAAnB;AAA2B,MAAA,QAAQ,EAAE,KAAKmB,QAA1C;AACE,MAAA,KAAK,EAAE,GADT;AACc,MAAA,MAAM,EAAE,KAAKV,KAAL,CAAWP,MADjC;AACyC,MAAA,OAAO,EAAE,KAAKO,KAAL,CAAWE,OAD7D;AACsE,MAAA,UAAU,EAAE,IADlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAKD;;AAEOQ,EAAAA,QAAR,CAAiBC,CAAjB,EAAiC;AAC/BC,IAAAA,KAAK,CAAC,iBAAD,CAAL;AACD;;AA9CmD;;AAiDtD,eAAezB,GAAf","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n \nimport 'jqwidgets-scripts/jqwidgets/styles/jqx.base.css';\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\n \nclass App extends React.PureComponent<{}, IGridProps> {\n  private myGrid = React.createRef<JqxGrid>(); \n \n  constructor(props: {}) {\n    super(props);\n \n    const source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n    };\n    \n    this.state = {\n        source: new jqx.dataAdapter(source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n    }\n  }\n \n  public componentDidMount(): void {\n    this.myGrid.current!.setOptions({ filterable: true });\n  }\n   \n  public render() {\n    return (\n      <JqxGrid ref={this.myGrid} onFilter={this.onFilter} \n        width={850} source={this.state.source} columns={this.state.columns} autoheight={true}\n      />\n    );\n  }\n \n  private onFilter(e: Event): void {\n    alert('do something...');\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}