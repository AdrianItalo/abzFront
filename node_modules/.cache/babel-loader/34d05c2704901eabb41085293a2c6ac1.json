{"ast":null,"code":"var _jsxFileName = \"/home/adrian/Escritorio/proyecto/my-app/src/App.tsx\";\nimport * as React from 'react';\nimport JqxGrid, { jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport { generatedata } from './generatedata';\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props); //const data: string = '[{ \"Country\": \"Belgium\", \"City\": \"Brussels\"}, {\"Country\": \"France\", \"City\": \"Paris\"}, {\"Country\": \"USA\", \"City\": \"Washington\" }]';\n\n    this.myGrid = React.createRef();\n    const source = {\n      datafields: [{\n        name: 'First Name',\n        type: 'string'\n      }, {\n        name: 'Last name',\n        type: 'string'\n      }],\n      datatype: 'json',\n      localdata: generatedata(2)\n    };\n    this.state = {\n      columns: [{\n        cellvaluechanging: (row, datafield, columntype, oldvalue, newvalue) => {\n          if (newvalue !== oldvalue) {\n            this.myGrid.current.setcellvalue(row, 'City', 'Select a city...');\n          }\n\n          ;\n        },\n        columntype: 'combobox',\n        datafield: 'First Name',\n        text: 'First Name',\n        width: 150\n      }, {\n        columntype: 'combobox',\n        datafield: 'City',\n        initeditor: (row, cellvalue, editor, celltext, cellwidth, cellheight) => {\n          const country = this.myGrid.current.getcellvalue(row, 'Country');\n          const city = editor.val();\n          let cities = [];\n\n          switch (country) {\n            case 'Belgium':\n              cities = ['Bruges', 'Brussels', 'Ghent'];\n              break;\n\n            case 'France':\n              cities = ['Bordeaux', 'Lille', 'Paris'];\n              break;\n\n            case 'USA':\n              cities = ['Los Angeles', 'Minneapolis', 'Washington'];\n              break;\n          }\n\n          ;\n          editor.jqxComboBox({\n            autoDropDownHeight: true,\n            source: cities\n          });\n\n          if (city !== 'Select a city...') {\n            const index = cities.indexOf(city);\n            editor.jqxComboBox('selectIndex', index);\n          }\n        },\n        text: 'City',\n        width: 150\n      }],\n      source: new jqx.dataAdapter(source)\n    };\n  }\n\n  render() {\n    return React.createElement(JqxGrid, {\n      ref: this.myGrid,\n      width: 300,\n      source: this.state.source,\n      columns: this.state.columns,\n      autoheight: true,\n      editable: true,\n      selectionmode: 'singlecell',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/adrian/Escritorio/proyecto/my-app/src/App.tsx"],"names":["React","JqxGrid","jqx","generatedata","App","PureComponent","constructor","props","myGrid","createRef","source","datafields","name","type","datatype","localdata","state","columns","cellvaluechanging","row","datafield","columntype","oldvalue","newvalue","current","setcellvalue","text","width","initeditor","cellvalue","editor","celltext","cellwidth","cellheight","country","getcellvalue","city","val","cities","jqxComboBox","autoDropDownHeight","index","indexOf","dataAdapter","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport JqxGrid, { IGridProps, jqx } from 'jqwidgets-scripts/jqwidgets-react-tsx/jqxgrid';\nimport { generatedata } from './generatedata';\nclass App extends React.PureComponent<{}, IGridProps> {\n    private myGrid = React.createRef<JqxGrid>();\n    constructor(props: {}) {\n        super(props);\n        //const data: string = '[{ \"Country\": \"Belgium\", \"City\": \"Brussels\"}, {\"Country\": \"France\", \"City\": \"Paris\"}, {\"Country\": \"USA\", \"City\": \"Washington\" }]';\n\n        const source: any =\n        {\n            datafields: [\n                { name: 'First Name', type: 'string' },\n                { name: 'Last name', type: 'string' }\n            ],\n            datatype: 'json',\n            localdata: generatedata(2)\n        };\n        this.state = {\n            columns: [\n                {\n                    cellvaluechanging: (row: number, datafield: string, columntype: any, oldvalue: any, newvalue: any): void => {\n                        if (newvalue !== oldvalue) {\n                            this.myGrid.current!.setcellvalue(row, 'City', 'Select a city...');\n                        };\n                    },\n                    columntype: 'combobox', \n                    datafield: 'First Name',\n                    text: 'First Name', \n                    width: 150\n                },\n                {\n                    columntype: 'combobox',\n                    datafield: 'City', \n                    initeditor: (row: number, cellvalue: any, editor: any, celltext: any, cellwidth: any, cellheight: any) => {\n                        const country = this.myGrid.current!.getcellvalue(row, 'Country');\n                        const city = editor.val();\n                        let cities: string[] = [];\n                        switch (country) {\n                            case 'Belgium':\n                                cities = ['Bruges', 'Brussels', 'Ghent'];\n                                break;\n                            case 'France':\n                                cities = ['Bordeaux', 'Lille', 'Paris'];\n                                break;\n                            case 'USA':\n                                cities = ['Los Angeles', 'Minneapolis', 'Washington'];\n                                break;\n                        };\n                        editor.jqxComboBox({ autoDropDownHeight: true, source: cities });\n                        if (city !== 'Select a city...') {\n                            const index = cities.indexOf(city);\n                            editor.jqxComboBox('selectIndex', index);\n                        }\n                    },\n                    text: 'City',\n                    width: 150\n                }\n            ],\n            source: new jqx.dataAdapter(source) \n        }\n    }\n    public render() {\n        return (\n            <JqxGrid ref={this.myGrid}\n                width={300} source={this.state.source} columns={this.state.columns}\n                autoheight={true} editable={true} selectionmode={'singlecell'} />\n        );\n    }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}